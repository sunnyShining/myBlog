<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sunny</title>
  
  <subtitle>Happy Every Day</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.sunnyshining.xyz/"/>
  <updated>2019-01-24T02:44:11.249Z</updated>
  <id>https://www.sunnyshining.xyz/</id>
  
  <author>
    <name>sunny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>es6 let理解闭包</title>
    <link href="https://www.sunnyshining.xyz/2019/bibao/"/>
    <id>https://www.sunnyshining.xyz/2019/bibao/</id>
    <published>2019-01-23T03:20:10.000Z</published>
    <updated>2019-01-24T02:44:11.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// var</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">6</span>]();</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// let</span></span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">6</span>]();</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure><a id="more"></a><p>结果</p><p>var执行结果</p><p><img src="/2019/bibao/bibao_var.png" alt="var"></p><p>let执行结果</p><p><img src="/2019/bibao/bibao_let.png" alt="let"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>两个例子中，唯一的区别是前者for循环中使用var来定义i，得到的结果是10.而后者使用的是let来定义i，最终得到的结果是6.这是为什么呢？</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>let和var区别：</p><p>相同点: 作用都是定义变量关键字</p><p>区别点：</p><p> 作用域只限制于当前代码块{}   —–   var的作用域则是函数体function(){}<br> 使用let声明变量的作用域不会提示  —–   而var会自动提升<br> 在相同的用作用域下不能有相同的变量，否则报错  ——   而var中则可以出现相同变量名，且不会报错。<br> for循环提现父子作用域。 —— 比如以前ES5、在循环中找不到你的 i 值，则会上面找，这样往往是不合逻辑的， 解决办法可以使用闭包完美解决，而ES6出现了let则不用闭包，他自带有作用域的限制，这样就能很好的满足我们的逻辑了</p><p>var循环执行相当于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">a[<span class="number">0</span>] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">9</span>;</span><br><span class="line">a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">arr[<span class="number">6</span>](); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>let执行顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    arr[i]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">    arr[i]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">9</span>;</span><br><span class="line">    arr[i]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">6</span>](); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// Uncaught ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure><p>结果一目了然</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// var&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	arr[i] = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr[&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// let&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	arr[i] = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr[&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="javascript" scheme="https://www.sunnyshining.xyz/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中数组的迭代方法：forEach、map、filter、reduce、every、some</title>
    <link href="https://www.sunnyshining.xyz/2018/array-options/"/>
    <id>https://www.sunnyshining.xyz/2018/array-options/</id>
    <published>2018-10-24T09:48:23.000Z</published>
    <updated>2019-01-23T08:20:38.713Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://juejin.im/post/5835808067f3560065ed4ab2" target="_blank" rel="noopener">一张图看懂JavaScript中数组的迭代方法：forEach、map、filter、reduce、every、some</a></p><a id="more"></a><p><img src="/2018/array-options/array_options1.png" alt="array_options1.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自&lt;a href=&quot;https://juejin.im/post/5835808067f3560065ed4ab2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一张图看懂JavaScript中数组的迭代方法：forEach、map、filter、reduce、every、some&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="javascript" scheme="https://www.sunnyshining.xyz/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript的宏任务和微任务</title>
    <link href="https://www.sunnyshining.xyz/2018/js-task/"/>
    <id>https://www.sunnyshining.xyz/2018/js-task/</id>
    <published>2018-10-24T06:44:57.000Z</published>
    <updated>2018-10-25T01:49:34.454Z</updated>
    
    <content type="html"><![CDATA[<p>文章参考<a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在掘金上看到一篇文章<a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制</a>，里面有两个词语，感觉很陌生macro-task(宏任务)<br>micro-task(微任务)。</p><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>首先一段代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'31'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'41'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'3'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'4'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'5'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'6'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'7'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'8'</span>);</span><br></pre></td></tr></table></figure><p>1 5 8 31 3 6 41 4 2 7</p><h2 id="why"><a href="#why" class="headerlink" title="why"></a>why</h2><p>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。当指定的事情完成时，Event Table会将这个函数移入Event Queue。主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。不断重复，也就是常说的Event Loop(事件循环)。导图如下</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/21/15fdd88994142347?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="process"></p><p>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval<br>micro-task(微任务)：Promise，process.nextTick</p><p>第一轮事件循环流程分析如下：</p><p>整体script作为第一个宏任务进入主线程，遇到console.log，输出1。<br>遇到setTimeout，其回调函数被分发到宏任务Event Queue中。我们暂且记为setTimeout1。<br>遇到Promise，then被分发到微任务Event Queue中。我们记为then1。<br>遇到Promise，then被分发到微任务Event Queue中。我们记为then2。<br>遇到Promise，new Promise直接执行，输出5。then被分发到微任务Event Queue中。我们记为then3。<br>又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，我们记为setTimeout2。<br>整体script作为第一个宏任务进入主线程，遇到console.log，输出8。</p><table><thead><tr><th style="text-align:left">宏任务Event Queue</th><th style="text-align:center">微任务Event Queue</th></tr></thead><tbody><tr><td style="text-align:left">setTimeout1</td><td style="text-align:center">then1</td></tr><tr><td style="text-align:left">setTimeout2</td><td style="text-align:center">then2</td></tr><tr><td style="text-align:left"></td><td style="text-align:center">then3</td></tr></tbody></table><p>上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和8。</p><p>我们发现了then1、then2、then3几个微任务。<br>执行then1、then2、then3输出31、3、6。<br>then1遇到then，then被分发到微任务Event Queue中。我们记为then4。<br>then2遇到then，then被分发到微任务Event Queue中。我们记为then5。</p><table><thead><tr><th style="text-align:left">宏任务Event Queue</th><th style="text-align:center">微任务Event Queue</th></tr></thead><tbody><tr><td style="text-align:left">setTimeout1</td><td style="text-align:center">then1</td></tr><tr><td style="text-align:left">setTimeout2</td><td style="text-align:center">then2</td></tr></tbody></table><p>执行then4、then5输出41、4。</p><p>好了，第二轮事件循环正式结束，此时输出为1 5 8 31 3 6 41 4。那么第二轮时间循环从setTimeout1宏任务开始：<br>首先输出2，再输出7。</p><p>最后结束输出为1 5 8 31 3 6 41 4 2 7</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章参考&lt;a href=&quot;https://juejin.im/post/59e85eebf265da430d571f89&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这一次，彻底弄懂 JavaScript 执行机制&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在掘金上看到一篇文章&lt;a href=&quot;https://juejin.im/post/59e85eebf265da430d571f89&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这一次，彻底弄懂 JavaScript 执行机制&lt;/a&gt;，里面有两个词语，感觉很陌生macro-task(宏任务)&lt;br&gt;micro-task(微任务)。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="javascript" scheme="https://www.sunnyshining.xyz/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>linux基础命令</title>
    <link href="https://www.sunnyshining.xyz/2018/linux-base-knowledge/"/>
    <id>https://www.sunnyshining.xyz/2018/linux-base-knowledge/</id>
    <published>2018-10-05T09:39:17.000Z</published>
    <updated>2018-10-12T02:21:55.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、文件管理"><a href="#一、文件管理" class="headerlink" title="一、文件管理"></a>一、文件管理</h2><h3 id="1-查看文件信息-ls"><a href="#1-查看文件信息-ls" class="headerlink" title="1. 查看文件信息: ls"></a>1. 查看文件信息: ls</h3><p>参数</p><ul><li>-a 显示指定目录下所有子目录和文件，包括隐藏文件</li><li>-l 列表的方式显示文件的详细信息</li><li>-h 利于人看，不是用默认的byte做单位，而根据实际情况调整</li></ul><p>输出重定向命令：ls &gt; test.txt<br><a id="more"></a></p><p>管道: |</p><h3 id="2-切换工具目录：cd"><a href="#2-切换工具目录：cd" class="headerlink" title="2. 切换工具目录：cd"></a>2. 切换工具目录：cd</h3><h3 id="3-显示当前路径：pwd"><a href="#3-显示当前路径：pwd" class="headerlink" title="3. 显示当前路径：pwd"></a>3. 显示当前路径：pwd</h3><h3 id="4-创建目录：mkdir"><a href="#4-创建目录：mkdir" class="headerlink" title="4. 创建目录：mkdir"></a>4. 创建目录：mkdir</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、文件管理&quot;&gt;&lt;a href=&quot;#一、文件管理&quot; class=&quot;headerlink&quot; title=&quot;一、文件管理&quot;&gt;&lt;/a&gt;一、文件管理&lt;/h2&gt;&lt;h3 id=&quot;1-查看文件信息-ls&quot;&gt;&lt;a href=&quot;#1-查看文件信息-ls&quot; class=&quot;headerlink&quot; title=&quot;1. 查看文件信息: ls&quot;&gt;&lt;/a&gt;1. 查看文件信息: ls&lt;/h3&gt;&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-a 显示指定目录下所有子目录和文件，包括隐藏文件&lt;/li&gt;
&lt;li&gt;-l 列表的方式显示文件的详细信息&lt;/li&gt;
&lt;li&gt;-h 利于人看，不是用默认的byte做单位，而根据实际情况调整&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输出重定向命令：ls &amp;gt; test.txt&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="linux" scheme="https://www.sunnyshining.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>项目难点总结</title>
    <link href="https://www.sunnyshining.xyz/2018/difficulty/"/>
    <id>https://www.sunnyshining.xyz/2018/difficulty/</id>
    <published>2018-10-04T06:01:06.000Z</published>
    <updated>2018-10-08T00:26:23.134Z</updated>
    
    <content type="html"><![CDATA[<h3 id="万师傅8-3师傅节项目，师傅故事生成海报，师傅头像图片跨域"><a href="#万师傅8-3师傅节项目，师傅故事生成海报，师傅头像图片跨域" class="headerlink" title="万师傅8.3师傅节项目，师傅故事生成海报，师傅头像图片跨域"></a>万师傅8.3师傅节项目，师傅故事生成海报，师傅头像图片跨域</h3><p>项目链接：<a href="https://h5-static.wanshifu.com/shifujie83/posterMaster.html" target="_blank" rel="noopener">https://h5-static.wanshifu.com/shifujie83/posterMaster.html</a></p><a id="more"></a><p>使用插件html2canvas.js，设置useCORS参数为true，并且修改后端修改nginx配置文件add_header Access-Control-Allow-Origin *，需要重启nginx，使用nginx代理去访问图片。</p><h3 id="万师傅8-3师傅节项目，师傅故事生成海报背景模糊"><a href="#万师傅8-3师傅节项目，师傅故事生成海报背景模糊" class="headerlink" title="万师傅8.3师傅节项目，师傅故事生成海报背景模糊"></a>万师傅8.3师傅节项目，师傅故事生成海报背景模糊</h3><p>项目链接：<a href="https://h5-static.wanshifu.com/shifujie83/posterMaster.html" target="_blank" rel="noopener">https://h5-static.wanshifu.com/shifujie83/posterMaster.html</a></p><p>不使用背景图片，而是直接在dom里面插入img标签即可</p><h3 id="万师傅微信个人中心三期swiper，history需点击两次才能返回原页面，造成导航错乱"><a href="#万师傅微信个人中心三期swiper，history需点击两次才能返回原页面，造成导航错乱" class="headerlink" title="万师傅微信个人中心三期swiper，history需点击两次才能返回原页面，造成导航错乱"></a>万师傅微信个人中心三期swiper，history需点击两次才能返回原页面，造成导航错乱</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;万师傅8-3师傅节项目，师傅故事生成海报，师傅头像图片跨域&quot;&gt;&lt;a href=&quot;#万师傅8-3师傅节项目，师傅故事生成海报，师傅头像图片跨域&quot; class=&quot;headerlink&quot; title=&quot;万师傅8.3师傅节项目，师傅故事生成海报，师傅头像图片跨域&quot;&gt;&lt;/a&gt;万师傅8.3师傅节项目，师傅故事生成海报，师傅头像图片跨域&lt;/h3&gt;&lt;p&gt;项目链接：&lt;a href=&quot;https://h5-static.wanshifu.com/shifujie83/posterMaster.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://h5-static.wanshifu.com/shifujie83/posterMaster.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="codeing" scheme="https://www.sunnyshining.xyz/tags/codeing/"/>
    
  </entry>
  
  <entry>
    <title>语录，记录每一天</title>
    <link href="https://www.sunnyshining.xyz/2018/quotation/"/>
    <id>https://www.sunnyshining.xyz/2018/quotation/</id>
    <published>2018-10-02T07:04:09.000Z</published>
    <updated>2018-11-12T07:02:17.085Z</updated>
    
    <content type="html"><![CDATA[<p>随记语录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当你的才华还撑不起你的野心时，那你就应该静下心来学习，当你的能力还驾驭不了你的目标时，那就应该沉下心来历练。 --莫言</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">弱者总是用善良来掩饰内心的软弱，而强者从不畏惧对手的强势。 --卫庄</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">活在当下，别在怀念过去或者憧憬未来中浪费掉你现在的生活</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">时间会刺破青春表面的彩饰，会在美人的额上掘深深浅槽。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不乱于心，不困于情。不畏将来，不念过往。如此，安好。 --丰子恺</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">趁阳光还暖，心还软，做一些自己认为正确的事，包括喜欢一个对的人。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随记语录&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;当你的才华还撑不起你的野心时，那你就应该静下心来学习，当你的能力还驾驭不了你的目标时，那就应该沉下心来历练。 --莫言&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="生活" scheme="https://www.sunnyshining.xyz/categories/life/"/>
    
    
      <category term="生活" scheme="https://www.sunnyshining.xyz/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>python3一些基础知识</title>
    <link href="https://www.sunnyshining.xyz/2018/python3-base-knowledge/"/>
    <id>https://www.sunnyshining.xyz/2018/python3-base-knowledge/</id>
    <published>2018-10-02T06:08:33.000Z</published>
    <updated>2018-10-04T02:21:49.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lambda-函数"><a href="#lambda-函数" class="headerlink" title="lambda 函数"></a>lambda 函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="keyword">lambda</span> x:x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">A(<span class="number">1</span>) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>lambda函数设计出来是为了简化def的。简单的理解，冒号左边→想要传递的参数，冒号右边→想要得到的数（可能带表达式）</p><a id="more"></a><h2 id="map-函数"><a href="#map-函数" class="headerlink" title="map() 函数"></a>map() 函数</h2><p>map() 会根据提供的函数对指定序列做映射</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(function, iterable, ...) <span class="comment"># 第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(<span class="keyword">lambda</span> x, y, z: (x + y + z) ** <span class="number">2</span>, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>], [<span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>])) <span class="comment"># [196, 400, 676, 1024, 1444]</span></span><br></pre></td></tr></table></figure><h2 id="reduce-函数"><a href="#reduce-函数" class="headerlink" title="reduce() 函数"></a>reduce() 函数</h2><p>reduce（）的使用方法形如reduce(f(x),Itera).对，它的形式和map()函数一样。不过参数f（x）必须有两个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">reduce(<span class="keyword">lambda</span> x, y: x * <span class="number">10</span> + y, [<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]) <span class="comment"># 256</span></span><br></pre></td></tr></table></figure><h2 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter() 函数"></a>filter() 函数</h2><p>filter() 函数用于过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，可以使用 list() 来转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> != <span class="number">0</span>, [<span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>])) <span class="comment"># [5, 7, 11]</span></span><br></pre></td></tr></table></figure><h2 id="sorted-函数"><a href="#sorted-函数" class="headerlink" title="sorted() 函数"></a>sorted() 函数</h2><p>sorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序。要进行反向排序，不必改动key函数，可以传入第三个参数reverse=True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted([<span class="number">1</span>, <span class="number">-2</span>, <span class="number">4</span>, <span class="number">-111</span>, <span class="number">20</span>], key=abs, reverse=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lambda-函数&quot;&gt;&lt;a href=&quot;#lambda-函数&quot; class=&quot;headerlink&quot; title=&quot;lambda 函数&quot;&gt;&lt;/a&gt;lambda 函数&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x:x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;lambda函数设计出来是为了简化def的。简单的理解，冒号左边→想要传递的参数，冒号右边→想要得到的数（可能带表达式）&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="python" scheme="https://www.sunnyshining.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>程序员的成长之路</title>
    <link href="https://www.sunnyshining.xyz/2018/be-a-coder/"/>
    <id>https://www.sunnyshining.xyz/2018/be-a-coder/</id>
    <published>2018-09-27T02:18:48.000Z</published>
    <updated>2018-09-27T04:34:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>今日风和，太阳火辣辣的照着地面，看着CSDN上一篇篇<a href="https://blog.csdn.net/blogdevteam/article/details/72917467" target="_blank" rel="noopener">从高考到程序员</a>专题的文章，回想下我是如何走上coder这条道路的。<br><a id="more"></a></p><h2 id="2、求学之路"><a href="#2、求学之路" class="headerlink" title="2、求学之路"></a>2、求学之路</h2><p>我相信很多人的求学之路都不是那么顺利，当然我的也一样，我小时候是一个很羞涩的小男孩，在家很懂事，在外不敢发声，所以在小学和初中少不了被别人欺负，那时候我相信，只要好好学习，一定会有所成。</p><p>事与愿违，好好学习的我初一成了我们班最差的学生之一。那时候考完，在120分数学的面前我仅拿了27分，震惊了我自己，同时也震惊了我父母，他们自然少不了被同村人嘲笑。尤其是和我一个年级朋友的父母，那时候我记得，父亲一回家，狠狠的说了我一顿。我那时候不知道该如何自处，想到过失败没想过这么失败。那时候可能是武侠剧看多了吧，我刺破食指，流出来鲜血，想写血书。发誓让自己好好学习，那时候的感觉第一是疼，第二是压根就没那么多血，根本写不了一个字。但形式还是做了，我开始了我好好学习的生涯。在我初中毕业前，年级第二第一的位置一直为我敞开，所以最后我上了我们县城的重点高中—上高二中。</p><p>进入高中后，我才发现，以前我在山村里面的成绩在这县城高中里面简直就是毛毛雨。我那时候被分配到了学校最差的班，继续我的高中学业。然而到了高三那会，我已到了学校最好的班级。2010年，我第一年参加高考。当结果出来时，我震惊了，我仅比一本线高出几分，加上没有人指导我报考，我随意挑选了几所大学，最后云南大学通信工程录取了我。母亲那时候和我说，自己好好考虑下，是去复读还是去上大学。我心中有太多不甘，几夜未眠，咬咬牙，选择了复读。复读的日子是苦闷的，我那时候几乎没有听过一节课，天天在做题，天天想着高考。从开始的桌面空无一物，到毕业时的满满一袋，我也不知道我刷了多少题，我现在很佩服当时的自己。到高考那会我却内心紧张万分。当考完数学的时候，我觉得我整个人生就是一个错误，紧张是我考的一塌糊涂。那晚班主任和我讲，要我晚自习回去睡一下，把握好最后一门。s感谢他，让我抓住最后的机会，考上了重点。后来考试结果出来，我每天缠着他，教我报考，最终上了武汉理工大学矿物加工工程。</p><p>那时候刚进学校系主任和我们讲，你们很幸运，我们这个专业是学院最好的专业，一般进国企，进研究院，多努力，以后会有所成。我很开心，相信了他的话。我也开始好好学习，大一大二大三我都拿到了奖学金，数学在整个学院面前更是舍我其谁。同时顺利的也成了学习委员，一干就是三年。大四快毕业那会，正是要决定找工作还是读研的时候，大家突然翻开学校的就业中心，发现压根就没有我们专业的招聘，才知道一向温文尔雅的系主任骗了我们，我们专业压根毕业就面临失业。我那个恨，对老师这个词语重新理解了一番。我那时由于不想让贫穷的父母继续支持我的学业，也由于年龄太大也不想着继续追寻我的学历，便在一个国企矿山上找了份工作，于2015年7月14日，我到国企报到了。</p><p>很多人向往国企，当时我也是。我在进入国企的第一天，在山上招待所住的，整个招待所空无一人，管理员5点左右便早早的下班了，整个晚上山上只有虫鸣和蚊子和我相伴。走廊一闪一闪的灯光在漆黑的夜空显得分外的恐怖。月底来了个研究生，我俩在这个环境下待了一个多月。我每天得忍受机器的轰鸣声和各种各样的矿石灰尘，每个月拿着两千左右的工资。我想我的人生难道一直这样，碌碌无为？终于，我无法容忍。我感觉我来矿山许久，我冲过沙子，扛过钢管，背过沙包，扫过地等等，然而没有学习过任何知识。我的知识完全没有长进，只有了体力的长进。我找大学同学了解他们现在在从事啥，想过和同学去培训机构教书，想过去武汉找一位室友，听说他在武汉做销售（后来证实在搞传销）。万分绝望，有个朋友找到了我，说服我我去学习IT。各种综合考量之下，终于2016年5月8日我办完所有手续，离开了公司， 来到深圳投靠那同学。</p><p>我于2016年5月11日正式进入一家培训机构学习，算是正式开始了我的程序员生涯。由于当前前端较快毕业，就业率高，身上没钱，我便选择了学习前端开发。每每打电话回家，我跟父母讲我有钱，然而我却借了高利贷。学习的日子总是轻松的，或许我适合学习吧，一晃一个多月过去了，我终于毕业了。毕业了就意味这要去找工作，很幸运2016年7月21日我进了一家外包公司，辗转外包到了平安银行。幸运的是我遇到一位大神，他会跟我讲哪些知识我该去学习，这对我以后的技术有很大的帮助。终于在泡过很多天的图书馆之后，我渐渐成熟起来，也能独当一面了，我也开始带起来我的第一个徒弟。后来我想有更长远的发展，有更高的薪水，于2018年3月26日，我离开平安银行，2018年3月27日入职一家私企—深圳小亿网络科技有限公司（万师傅）。在刚开始入职这公司的时候，我对公司h5代码架构方面进行升级，使未来更容易维护项目，并搭起一套新项目脚手架。在空闲时间不断的对python3和RN进行学习，感觉自己知识越来越丰富，希望未来走的更远。</p><h2 id="3、后记"><a href="#3、后记" class="headerlink" title="3、后记"></a>3、后记</h2><p><strong>愿自己可以活到老，学到老，做一个永不停歇的程序员</strong></p><p><strong>愿所有人的青春，都能被温柔以待</strong></p><h2 id="4、附一些照片"><a href="#4、附一些照片" class="headerlink" title="4、附一些照片"></a>4、附一些照片</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、前言&quot;&gt;&lt;a href=&quot;#1、前言&quot; class=&quot;headerlink&quot; title=&quot;1、前言&quot;&gt;&lt;/a&gt;1、前言&lt;/h2&gt;&lt;p&gt;今日风和，太阳火辣辣的照着地面，看着CSDN上一篇篇&lt;a href=&quot;https://blog.csdn.net/blogdevteam/article/details/72917467&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;从高考到程序员&lt;/a&gt;专题的文章，回想下我是如何走上coder这条道路的。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="https://www.sunnyshining.xyz/categories/life/"/>
    
    
      <category term="生活" scheme="https://www.sunnyshining.xyz/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>python3批量压缩图片</title>
    <link href="https://www.sunnyshining.xyz/2018/python-compress-img/"/>
    <id>https://www.sunnyshining.xyz/2018/python-compress-img/</id>
    <published>2018-09-26T08:56:30.000Z</published>
    <updated>2018-09-26T09:57:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><a href="https://tinypng.com/" target="_blank" rel="noopener">TinyPNG</a>和<a href="https://tinyjpg.com/" target="_blank" rel="noopener">TinyJPG</a>两个网站提供了.png和.jpg格式图片压缩和优化的功能。虽然可以很轻松地使用网页版进行操作，但是有些时候，调用网站提供的API更为方便快捷。tinify模块就是由TinyPNG提供的使用Python调用Tiny PNG API的模块。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade tinify</span><br></pre></td></tr></table></figure><h2 id="获取tinify-API-key"><a href="#获取tinify-API-key" class="headerlink" title="获取tinify API key"></a>获取tinify API key</h2><p>如果想调用TinyPNG的API，需要先在他们的网站<a href="https://tinypng.com/dashboard/api" target="_blank" rel="noopener">TinyPNG Developer API</a>上申请一个API key用于身份验证。提供名称和邮箱，就可以获得一个API key，API key会以链接的形式发到邮箱里，可以使用icloud和outlook邮箱，不可使用qq邮箱，申请成功如下</p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-5216b3b7091a201d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="api_key"></p><h2 id="编写python3代码"><a href="#编写python3代码" class="headerlink" title="编写python3代码"></a>编写python3代码</h2><p>1、获取终端输入的文件目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">    tinypng [-d] &lt;dir&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Options:</span></span><br><span class="line"><span class="string">    -h,--help   显示帮助菜单</span></span><br><span class="line"><span class="string">    -d          压缩目录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Example:</span></span><br><span class="line"><span class="string">    tinypng -d /Users/sunny/Desktop/xxx</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">arguments = docopt(__doc__)</span><br><span class="line">finder = arguments[<span class="string">'&lt;dir&gt;'</span>]</span><br></pre></td></tr></table></figure><p>2、获取目录下图片文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取图片路径</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img_path</span><span class="params">(self, finder)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> os.listdir(finder):</span><br><span class="line">        temp_path = os.path.join(finder, p)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(temp_path):</span><br><span class="line">            self.get_img_path(temp_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> os.path.splitext(p)[<span class="number">1</span>] == <span class="string">'.png'</span> <span class="keyword">or</span> os.path.splitext(p)[<span class="number">1</span>] == <span class="string">'.jpg'</span> <span class="keyword">or</span> os.path.splitext(p)[<span class="number">1</span>] == <span class="string">'.jpeg'</span>:</span><br><span class="line">                self.png_path.append(os.path.join(finder, p))</span><br></pre></td></tr></table></figure><p>3、压缩图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_compress</span> <span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> self.png_path:</span><br><span class="line">        self.compress_file(os.path.abspath(file))</span><br><span class="line"><span class="comment"># 压缩文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress_file</span> <span class="params">(self, inputFile, width=None)</span>:</span></span><br><span class="line">    print(<span class="string">'-----------------compress start-----------------'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(inputFile):</span><br><span class="line">        print(<span class="string">'这不是一个文件，请输入文件的正确路径!'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dirname  = os.path.dirname(inputFile)</span><br><span class="line">        basename = os.path.basename(inputFile)</span><br><span class="line">        fileName, fileSuffix = os.path.splitext(basename)</span><br><span class="line">        print(<span class="string">'dirname=%s, basename=%s, fileName=%s, fileSuffix=%s'</span> % (dirname, basename, fileName, fileSuffix))</span><br><span class="line">        <span class="keyword">if</span> fileSuffix == <span class="string">'.png'</span> <span class="keyword">or</span> fileSuffix == <span class="string">'.jpg'</span> <span class="keyword">or</span> fileSuffix == <span class="string">'.jpeg'</span>:</span><br><span class="line">            dir_list = dirname.split(self.finder)</span><br><span class="line">            <span class="keyword">if</span> dir_list[<span class="number">1</span>] != <span class="string">''</span> <span class="keyword">and</span> dir_list[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">'/'</span>:</span><br><span class="line">                dir = os.path.join(self.finder, <span class="string">'tiny'</span>, dir_list[<span class="number">1</span>][<span class="number">1</span>:])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dir = os.path.join(self.finder, <span class="string">'tiny'</span>, dir_list[<span class="number">1</span>])</span><br><span class="line">            self.mkdir(dir)</span><br><span class="line">            self.compress(inputFile, <span class="string">f'<span class="subst">&#123;dir&#125;</span>/<span class="subst">&#123;basename&#125;</span>'</span>, width)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;fileName&#125;</span>不支持该文件类型压缩!'</span>)</span><br><span class="line">    print(<span class="string">'-----------------compress end-----------------'</span>)</span><br><span class="line"><span class="comment"># 压缩图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span> <span class="params">(self, inputFile, outputFile, img_width)</span>:</span></span><br><span class="line">    source = tinify.from_file(inputFile)</span><br><span class="line">    <span class="keyword">if</span> img_width <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        resized = source.resize(method=<span class="string">'scale'</span>, width=img_width)</span><br><span class="line">        resized.to_file(outputFile)</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;inputFile&#125;</span>压缩成功!'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        source.to_file(outputFile)</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;inputFile&#125;</span>压缩成功!'</span>)</span><br><span class="line"><span class="comment"># 新建文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span> <span class="params">(self, path)</span>:</span></span><br><span class="line">    exist = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exist:</span><br><span class="line">        print(<span class="string">f'建了一个名字叫做<span class="subst">&#123;path&#125;</span>的文件夹！'</span>)</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f'名字叫做<span class="subst">&#123;path&#125;</span>的文件夹已经存在了！'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>4、完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">    tinypng [-d] &lt;dir&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Options:</span></span><br><span class="line"><span class="string">    -h,--help   显示帮助菜单</span></span><br><span class="line"><span class="string">    -d          压缩目录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Example:</span></span><br><span class="line"><span class="string">    tinypng -d /Users/sunny/Desktop/xxx</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> tinify, os</span><br><span class="line"><span class="keyword">from</span> docopt <span class="keyword">import</span> docopt</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'sunny'</span></span><br><span class="line">__date__ = <span class="string">'2018/09/26'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请替换为自己申请的Key</span></span><br><span class="line">tinify.key = <span class="string">'6OB4sxKcwILxBSzknRKvdbL22f1UDIFv'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompressImg</span> <span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span> <span class="params">(self, finder)</span>:</span></span><br><span class="line">        self.png_path = []</span><br><span class="line">        self.finder = finder</span><br><span class="line">    <span class="comment"># 获取图片路径</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_img_path</span><span class="params">(self, finder)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> os.listdir(finder):</span><br><span class="line">            temp_path = os.path.join(finder, p)</span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(temp_path):</span><br><span class="line">                self.get_img_path(temp_path)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> os.path.splitext(p)[<span class="number">1</span>] == <span class="string">'.png'</span> <span class="keyword">or</span> os.path.splitext(p)[<span class="number">1</span>] == <span class="string">'.jpg'</span> <span class="keyword">or</span> os.path.splitext(p)[<span class="number">1</span>] == <span class="string">'.jpeg'</span>:</span><br><span class="line">                    self.png_path.append(os.path.join(finder, p))</span><br><span class="line">    <span class="comment"># 循环文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_compress</span> <span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> self.png_path:</span><br><span class="line">            self.compress_file(os.path.abspath(file))</span><br><span class="line">    <span class="comment"># 压缩文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compress_file</span> <span class="params">(self, inputFile, width=None)</span>:</span></span><br><span class="line">        print(<span class="string">'-----------------compress start-----------------'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(inputFile):</span><br><span class="line">            print(<span class="string">'这不是一个文件，请输入文件的正确路径!'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dirname  = os.path.dirname(inputFile)</span><br><span class="line">            basename = os.path.basename(inputFile)</span><br><span class="line">            fileName, fileSuffix = os.path.splitext(basename)</span><br><span class="line">            print(<span class="string">'dirname=%s, basename=%s, fileName=%s, fileSuffix=%s'</span> % (dirname, basename, fileName, fileSuffix))</span><br><span class="line">            <span class="keyword">if</span> fileSuffix == <span class="string">'.png'</span> <span class="keyword">or</span> fileSuffix == <span class="string">'.jpg'</span> <span class="keyword">or</span> fileSuffix == <span class="string">'.jpeg'</span>:</span><br><span class="line">                dir_list = dirname.split(self.finder)</span><br><span class="line">                <span class="keyword">if</span> dir_list[<span class="number">1</span>] != <span class="string">''</span> <span class="keyword">and</span> dir_list[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">'/'</span>:</span><br><span class="line">                    dir = os.path.join(self.finder, <span class="string">'tiny'</span>, dir_list[<span class="number">1</span>][<span class="number">1</span>:])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dir = os.path.join(self.finder, <span class="string">'tiny'</span>, dir_list[<span class="number">1</span>])</span><br><span class="line">                self.mkdir(dir)</span><br><span class="line">                self.compress(inputFile, <span class="string">f'<span class="subst">&#123;dir&#125;</span>/<span class="subst">&#123;basename&#125;</span>'</span>, width)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">f'<span class="subst">&#123;fileName&#125;</span>不支持该文件类型压缩!'</span>)</span><br><span class="line">        print(<span class="string">'-----------------compress end-----------------'</span>)</span><br><span class="line">    <span class="comment"># 压缩图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compress</span> <span class="params">(self, inputFile, outputFile, img_width)</span>:</span></span><br><span class="line">        source = tinify.from_file(inputFile)</span><br><span class="line">        <span class="keyword">if</span> img_width <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            resized = source.resize(method=<span class="string">'scale'</span>, width=img_width)</span><br><span class="line">            resized.to_file(outputFile)</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;inputFile&#125;</span>压缩成功!'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            source.to_file(outputFile)</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;inputFile&#125;</span>压缩成功!'</span>)</span><br><span class="line">    <span class="comment"># 新建文件夹</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mkdir</span> <span class="params">(self, path)</span>:</span></span><br><span class="line">        exist = os.path.exists(path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exist:</span><br><span class="line">            print(<span class="string">f'建了一个名字叫做<span class="subst">&#123;path&#125;</span>的文件夹！'</span>)</span><br><span class="line">            os.makedirs(path)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">f'名字叫做<span class="subst">&#123;path&#125;</span>的文件夹已经存在了！'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cli</span> <span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""command-line interface"""</span></span><br><span class="line">    arguments = docopt(__doc__)</span><br><span class="line">    finder = arguments[<span class="string">'&lt;dir&gt;'</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tinify.validate()</span><br><span class="line">        <span class="keyword">if</span> tinify.compression_count &lt; <span class="number">500</span>:</span><br><span class="line">            print(<span class="string">f'本月已压缩图片次数<span class="subst">&#123;tinify.compression_count&#125;</span>'</span>)</span><br><span class="line">            ci = CompressImg(finder)</span><br><span class="line">            ci.get_img_path(finder)</span><br><span class="line">            ci.handle_compress()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">f'本月压缩图片次数不足'</span>)</span><br><span class="line">    <span class="keyword">except</span> tinify.Error <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;e&#125;</span>error'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cli()</span><br></pre></td></tr></table></figure><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 tinypng.py -d xxx (xxx为路径)</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://upload-images.jianshu.io/upload_images/4605151-1d1c2c8fcc082c75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://tinypng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TinyPNG&lt;/a&gt;和&lt;a href=&quot;https://tinyjpg.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TinyJPG&lt;/a&gt;两个网站提供了.png和.jpg格式图片压缩和优化的功能。虽然可以很轻松地使用网页版进行操作，但是有些时候，调用网站提供的API更为方便快捷。tinify模块就是由TinyPNG提供的使用Python调用Tiny PNG API的模块。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="python" scheme="https://www.sunnyshining.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>urllib、pyquery下载笔趣阁小说</title>
    <link href="https://www.sunnyshining.xyz/2018/mojintianshi/"/>
    <id>https://www.sunnyshining.xyz/2018/mojintianshi/</id>
    <published>2018-09-25T06:28:04.000Z</published>
    <updated>2018-09-25T08:25:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、小说章节路径获取"><a href="#一、小说章节路径获取" class="headerlink" title="一、小说章节路径获取"></a>一、小说章节路径获取</h2><p><strong>1、爬取的小说名为摸金天师，小说首页为<a href="http://www.biquge.com.tw/18_18128/" target="_blank" rel="noopener">http://www.biquge.com.tw/18_18128/</a> ，通过urllib.request.urlopen获取页面HTTPResposne类型的对象，在通过read()方法获取页面内容</strong></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">request = urllib.request.Request(url, headers=headers)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    content = urllib.request.urlopen(request)</span><br><span class="line">    text = str(content.read(), encoding = <span class="string">'gbk'</span>)</span><br><span class="line">    content.close()</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span></span><br></pre></td></tr></table></figure><p><strong>2、审查章节元素，获取章节路径</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-9019dc0a25798009.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="chapters"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_chapter</span><span class="params">(self)</span>:</span></span><br><span class="line">    html = self.request(self.url)</span><br><span class="line">    doc = pq(html)</span><br><span class="line">    all_chapters = doc(<span class="string">'#list a'</span>).items()</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> all_chapters:</span><br><span class="line">        text = a.text()</span><br><span class="line">        href = self.domain + a.attr(<span class="string">'href'</span>)</span><br><span class="line">        self.chapter_titles.append(text)</span><br><span class="line">        self.chapter_urls.append(href)</span><br></pre></td></tr></table></figure><p><strong>3、审查页面元素，获取每个章节内容</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-3aaf6232e001bb2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="content"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span><span class="params">(self, url)</span>:</span></span><br><span class="line">    html = self.request(url)</span><br><span class="line">    doc = pq(html)</span><br><span class="line">    content = doc(<span class="string">'#content'</span>).text()</span><br><span class="line">    content = content.replace(<span class="string">'\xa0'</span>*<span class="number">4</span>, <span class="string">'\n\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br></pre></td></tr></table></figure><p><strong>4、将文章输出txt</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span> <span class="params">(self, name, path, txt)</span>:</span></span><br><span class="line">        write_flag = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">with</span> open(path, <span class="string">'a'</span>, encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(name + <span class="string">'\n'</span>)</span><br><span class="line">            f.writelines(txt)</span><br><span class="line">            f.write(<span class="string">'\n\n'</span>)</span><br></pre></td></tr></table></figure><h2 id="二、完整代码"><a href="#二、完整代码" class="headerlink" title="二、完整代码"></a>二、完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># author: sunny</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">import</span> sys, random, time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadNovel</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.chapter_urls = []</span><br><span class="line">        self.chapter_titles = []</span><br><span class="line">        self.domain = <span class="string">'http://www.biquge.com.tw'</span></span><br><span class="line">        self.sleep_download_time = <span class="number">5</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all_chapter</span><span class="params">(self)</span>:</span></span><br><span class="line">        html = self.request(self.url)</span><br><span class="line">        doc = pq(html)</span><br><span class="line">        all_chapters = doc(<span class="string">'#list a'</span>).items()</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> all_chapters:</span><br><span class="line">            text = a.text()</span><br><span class="line">            href = self.domain + a.attr(<span class="string">'href'</span>)</span><br><span class="line">            self.chapter_titles.append(text)</span><br><span class="line">            self.chapter_urls.append(href)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_content</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        html = self.request(url)</span><br><span class="line">        doc = pq(html)</span><br><span class="line">        content = doc(<span class="string">'#content'</span>).text()</span><br><span class="line">        content = content.replace(<span class="string">'\xa0'</span>*<span class="number">4</span>, <span class="string">'\n\n'</span>)</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self, name, path, txt)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(path, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(name + <span class="string">'\n'</span>)</span><br><span class="line">            f.writelines(txt)</span><br><span class="line">            f.write(<span class="string">'\n\n'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        time.sleep(self.sleep_download_time)</span><br><span class="line">        <span class="comment"># 动态userAgent</span></span><br><span class="line">        user_agent_list = [ \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"</span> \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span></span><br><span class="line">        ]</span><br><span class="line">        ua = random.choice(user_agent_list)</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: ua</span><br><span class="line">        &#125;</span><br><span class="line">        request = urllib.request.Request(url, headers=headers)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            content = urllib.request.urlopen(request)</span><br><span class="line">            text = str(content.read(), encoding = <span class="string">'gbk'</span>)</span><br><span class="line">            content.close()</span><br><span class="line">            <span class="keyword">return</span> text</span><br><span class="line">        <span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">            print(e.reason)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    dl = DownloadNovel(<span class="string">'http://www.biquge.com.tw/18_18128/'</span>)</span><br><span class="line">    dl.get_all_chapter()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(dl.chapter_titles)):</span><br><span class="line">        print(<span class="string">'url=%s, title=%s'</span> %(dl.chapter_urls[i],dl.chapter_titles[i]))</span><br><span class="line">        txt = dl.get_content(dl.chapter_urls[i])</span><br><span class="line">        dl.write(dl.chapter_titles[i], <span class="string">'摸金天师.txt'</span>, txt)</span><br><span class="line">        sys.stdout.write(<span class="string">'  已下载:%.3f%%'</span> % float(i/len(dl.chapter_titles)) + <span class="string">'\r'</span>)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">    print(<span class="string">'下载完成'</span>)</span><br></pre></td></tr></table></figure><h2 id="三、效果"><a href="#三、效果" class="headerlink" title="三、效果"></a>三、效果</h2><p><img src="https://upload-images.jianshu.io/upload_images/4605151-1e2236300bcb3142.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><h2 id="四、源码"><a href="#四、源码" class="headerlink" title="四、源码"></a>四、源码</h2><p>源码<a href="https://github.com/sunnyShining/python-spider/tree/master/mojintianshi" target="_blank" rel="noopener">链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、小说章节路径获取&quot;&gt;&lt;a href=&quot;#一、小说章节路径获取&quot; class=&quot;headerlink&quot; title=&quot;一、小说章节路径获取&quot;&gt;&lt;/a&gt;一、小说章节路径获取&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1、爬取的小说名为摸金天师，小说首页为&lt;a href=&quot;http://www.biquge.com.tw/18_18128/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.biquge.com.tw/18_18128/&lt;/a&gt; ，通过urllib.request.urlopen获取页面HTTPResposne类型的对象，在通过read()方法获取页面内容&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="python" scheme="https://www.sunnyshining.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在线代码编辑器</title>
    <link href="https://www.sunnyshining.xyz/2018/editor-online/"/>
    <id>https://www.sunnyshining.xyz/2018/editor-online/</id>
    <published>2018-09-21T12:27:52.000Z</published>
    <updated>2018-09-22T03:36:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>纯粹为了在自己博客实现一个代码编辑器，方便在线测试各种代码。</p><h2 id="ace介绍"><a href="#ace介绍" class="headerlink" title="ace介绍"></a>ace介绍</h2><p>ACE 是一个开源的、独立的、基于浏览器的代码编辑器，可以嵌入到任何web页面或JavaScript应用程序中。ACE支持超过60种语言语法高亮，并能够处理代码多达400万行的大型文档。ACE开发团队称，ACE在性能和功能上可以媲美本地代码编辑器（如Sublime Text、TextMate和Vim等）。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p><strong>1.编写代码编辑器样式</strong></p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/4605151-b201cabc89add913.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-09-21 下午8.21.06.png"></p><p><strong>2.引入ace.js</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./src-noconflict/ace.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./src-noconflict/ext-language_tools.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**3.调用ace api实现代码编辑功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> editor1 = ace.edit(<span class="string">"editor1"</span>, &#123;</span></span><br><span class="line"><span class="javascript">            theme: <span class="string">"ace/theme/monokai"</span>,</span></span><br><span class="line"><span class="javascript">            mode: <span class="string">"ace/mode/html"</span>,</span></span><br><span class="line"><span class="javascript">            wrap: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            autoScrollEditorIntoView: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableBasicAutocompletion: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableSnippets: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableLiveAutocompletion: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> editor2 = ace.edit(<span class="string">"editor2"</span>, &#123;</span></span><br><span class="line"><span class="javascript">            theme: <span class="string">"ace/theme/monokai"</span>,</span></span><br><span class="line"><span class="javascript">            mode: <span class="string">"ace/mode/css"</span>,</span></span><br><span class="line"><span class="javascript">            autoScrollEditorIntoView: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableBasicAutocompletion: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableSnippets: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableLiveAutocompletion: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> editor3 = ace.edit(<span class="string">"editor3"</span>, &#123;</span></span><br><span class="line"><span class="javascript">            theme: <span class="string">"ace/theme/monokai"</span>,</span></span><br><span class="line"><span class="javascript">            mode: <span class="string">"ace/mode/javascript"</span>,</span></span><br><span class="line"><span class="javascript">            autoScrollEditorIntoView: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableBasicAutocompletion: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableSnippets: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableLiveAutocompletion: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> submit = <span class="built_in">document</span>.querySelector(<span class="string">'#submit'</span>);</span></span><br><span class="line"><span class="javascript">        submit.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> htmlValue = editor1.getValue();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cssValue = editor2.getValue();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jsValue = editor3.getValue();</span></span><br><span class="line"><span class="xml">            var htmlStr = '<span class="meta">&lt;!DOCTYPE html&gt;</span>' +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;html&gt;'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;head&gt;'</span> +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span>' +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">title</span>&gt;</span>代码测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span>' +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span>' +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> /&gt;</span>' +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span> /&gt;</span>' +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span>' +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"chrome=1,IE=edge"</span>/&gt;</span>' +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=0"</span>/&gt;</span>' +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined">' +</span></span></span><br><span class="line"><span class="undefined">                cssValue +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;/style&gt;'</span> +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js"</span>&gt;</span><span class="undefined">' +</span></span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;/'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'script&gt;'</span> +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined">' +</span></span></span><br><span class="line"><span class="javascript">                <span class="string">'new window.VConsole();'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;/'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'script&gt;'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;/head&gt;'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;body&gt;'</span> +</span></span><br><span class="line"><span class="undefined">                htmlValue +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined">' +</span></span></span><br><span class="line"><span class="undefined">                jsValue +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;/'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'script&gt;'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;/body&gt;'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;/html&gt;'</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'preview'</span>).srcdoc = htmlStr;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)()</span></span><br></pre></td></tr></table></figure><p>**4.将写好的代码放入iframe中运行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'preview'</span>).srcdoc = htmlStr;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/sunnyShining/editor-online" target="_blank" rel="noopener">源码</a></p><p>效果见我的博客<a href="https://sunnyshining.github.io/lab/index.html">https://sunnyshining.github.io/lab/index.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;纯粹为了在自己博客实现一个代码编辑器，方便在线测试各种代码。&lt;/p&gt;
&lt;h2 id=&quot;ace介绍&quot;&gt;&lt;a href=&quot;#ace介绍&quot; class=&quot;headerlink&quot; title=&quot;ace介绍&quot;&gt;&lt;/a&gt;ace介绍&lt;/h2&gt;&lt;p&gt;ACE 是一个开源的、独立的、基于浏览器的代码编辑器，可以嵌入到任何web页面或JavaScript应用程序中。ACE支持超过60种语言语法高亮，并能够处理代码多达400万行的大型文档。ACE开发团队称，ACE在性能和功能上可以媲美本地代码编辑器（如Sublime Text、TextMate和Vim等）。&lt;/p&gt;
&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.编写代码编辑器样式&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="javascript" scheme="https://www.sunnyshining.xyz/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>微信H5移动端真机调试技巧。</title>
    <link href="https://www.sunnyshining.xyz/2018/debug-skill/"/>
    <id>https://www.sunnyshining.xyz/2018/debug-skill/</id>
    <published>2018-09-04T02:47:20.000Z</published>
    <updated>2018-09-19T05:57:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sunnyshining.github.io/2018/debug-skill/index.html">原文链接</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在移动端开发过程中，尤其像在万师傅<a href="https://wxuser.wanshifu.com/" target="_blank" rel="noopener">微信个人中心</a>开发过程中，如果遇到比较棘手的bug，想通过F12调出控制台看下哪里出了问题，是不可能的，但是有bug总得解决所以，需要掌握下移动端的调试技巧</p><a id="more"></a><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>以下介绍几种方法</p><h3 id="1、使用vconsole（适用于ios和Android）"><a href="#1、使用vconsole（适用于ios和Android）" class="headerlink" title="1、使用vconsole（适用于ios和Android）"></a>1、使用vconsole（适用于ios和Android）</h3><p><a href="https://github.com/Tencent/vConsole" target="_blank" rel="noopener">vConsole</a>是由腾讯出品的一个轻量、可拓展、针对手机网页的前端开发者调试面板，它的功效有很多：查看 console 日志、查看网络请求、查看页面 element 结构、查看 Cookies 和localStorage、手动执行 JS 命令行、自定义插件。<br>具体使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Vconsole = <span class="built_in">require</span>(<span class="string">'PLUGINS/vconsole.min'</span>);</span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/MicroMessenger/i</span>.test(<span class="built_in">window</span>.navigator.userAgent.toLowerCase())) &#123;</span><br><span class="line">    <span class="keyword">new</span> Vconsole();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/vconsole.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vConsole = <span class="keyword">new</span> VConsole();</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://qncdn.wanshifu.com/7081e388fa8740319848b429cb459e12" alt="wechat"></p><p>其他高级用法可参考<a href="https://github.com/Tencent/vConsole/blob/dev/README_CN.md" target="_blank" rel="noopener">文档</a></p><h3 id="2、使用chrome-inspect调试（适用于android）"><a href="#2、使用chrome-inspect调试（适用于android）" class="headerlink" title="2、使用chrome://inspect调试（适用于android）"></a>2、使用chrome://inspect调试（适用于android）</h3><p>移动端开发时，我们常使用chrome自带的模拟器，模拟各种手机设备。 但模拟毕竟是模拟，当开发完毕，使用真机访问页面出现问题时如何调试呢？<br>答案是可以使用谷歌提供chrome://inspect进行像pc页面一样的调试，具体步骤如下</p><p>1、使用usb将手机的PC相连接；</p><p>2、手机中打开“设置”-&gt;”开发人员选项”-&gt;”USB调试”</p><p>3、打开pc侧chrome, 在地址栏中输入chrome://inspect/#devices 选中discover usb devices。可以看到我们的手机设备，如下图所示</p><p><img src="https://qncdn.wanshifu.com/57ad65c61444944b300485ef97fd1ccf" alt="chrome"></p><p>4、点击inspect即可像调试pc页面一样调试移动端页面，如下</p><p><img src="https://qncdn.wanshifu.com/e70a00b53e9d01e33996e62c971903f0" alt="example"></p><p>以上所讲调试适合移动端项目，微信里面h5页面也想实现这样调试，多做1个步骤即可。</p><p>1、微信浏览器打开<a href="http://debugx5.qq.com" target="_blank" rel="noopener">http://debugx5.qq.com</a> 这个链接，选择信息tab页，将打开TBS内核Inspector调试功能☑️即可，下方还有vconsole感兴趣也可以☑️</p><p><img src="https://qncdn.wanshifu.com/e0c124057be5e57ff03f9f2db325e84c" alt="tbs"></p><p>2、而后参考上面chrome://inspect调试</p><blockquote><p>如出现页面空白可参考链接<a href="https://www.cnblogs.com/slmk/p/7591126.html" target="_blank" rel="noopener">https://www.cnblogs.com/slmk/p/7591126.html</a> 解决</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://sunnyshining.github.io/2018/debug-skill/index.html&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在移动端开发过程中，尤其像在万师傅&lt;a href=&quot;https://wxuser.wanshifu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微信个人中心&lt;/a&gt;开发过程中，如果遇到比较棘手的bug，想通过F12调出控制台看下哪里出了问题，是不可能的，但是有bug总得解决所以，需要掌握下移动端的调试技巧&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="codeing" scheme="https://www.sunnyshining.xyz/tags/codeing/"/>
    
  </entry>
  
  <entry>
    <title>python3网络爬虫，下载起点小说</title>
    <link href="https://www.sunnyshining.xyz/2018/python3-download-noval/"/>
    <id>https://www.sunnyshining.xyz/2018/python3-download-noval/</id>
    <published>2018-07-07T01:49:29.000Z</published>
    <updated>2018-08-24T08:44:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>从我<a href="https://www.jianshu.com/p/daa4ffb4a5af" target="_blank" rel="noopener">简书</a>搬迁</p><h2 id="一、各章小说链接爬取"><a href="#一、各章小说链接爬取" class="headerlink" title="一、各章小说链接爬取"></a>一、各章小说链接爬取</h2><p><strong>1、章节URL：<a href="https://book.qidian.com/info/1012053141#Catalog" target="_blank" rel="noopener">https://book.qidian.com/info/1012053141#Catalog</a></strong></p><a id="more"></a><p><strong>2、经过审查元素各章节名称和链接如下图</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-c73ac7110b1867bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-07-07 上午9.24.52.png"></p><p><strong>3、可以通过如下方法获取章节名和各章节链接</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_download_chapter_url</span> <span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 用于爬取https</span></span><br><span class="line">    context = ssl._create_unverified_context()</span><br><span class="line">    response = urllib.request.urlopen(self.server, context = context)</span><br><span class="line">    text = str(response.read(), encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">    bf = BeautifulSoup(text, <span class="string">'html.parser'</span>)</span><br><span class="line">    div = bf.find_all(<span class="string">'div'</span>, class_ = <span class="string">'volume'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(div)):</span><br><span class="line">        li = div[i].find_all(<span class="string">'li'</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(li)):</span><br><span class="line">            a = li[j].find_all(<span class="string">'a'</span>)</span><br><span class="line">            html = BeautifulSoup(str(a), <span class="string">'lxml'</span>)</span><br><span class="line">            <span class="comment"># 章节url</span></span><br><span class="line">            self.chapterUrls.append(<span class="string">'https:'</span> + str(html.a.get(<span class="string">'href'</span>)))</span><br><span class="line">            <span class="comment"># 章节名</span></span><br><span class="line">            self.chapterNames.append(html.a.string)</span><br><span class="line">    print(self.chapterUrls)</span><br><span class="line">    print(self.chapterNames)</span><br></pre></td></tr></table></figure><p><strong>4、运行一下效果如下</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-954fa89a181c0fb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-07-07 上午9.30.27.png"></p><h2 id="二、爬取所有章节内容，并保存到文件中"><a href="#二、爬取所有章节内容，并保存到文件中" class="headerlink" title="二、爬取所有章节内容，并保存到文件中"></a>二、爬取所有章节内容，并保存到文件中</h2><p><strong>1、爬取章节内容</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-4eaffdd9ff3ce388.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-07-07 上午9.33.11.png"><br>可以看出，小说章节内容全在某个div下，可通过下面方法爬取<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_contents</span> <span class="params">(self, target)</span>:</span></span><br><span class="line">    context = ssl._create_unverified_context()</span><br><span class="line">    response = urllib.request.urlopen(target, context = context)</span><br><span class="line">    text = str(response.read(), encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">    bf = BeautifulSoup(text, <span class="string">'html.parser'</span>)</span><br><span class="line">    txts = bf.find_all(<span class="string">'div'</span>, class_=<span class="string">'read-content j_readContent'</span>)</span><br><span class="line">    txts = txts[<span class="number">0</span>].text.replace(<span class="string">'\xa0'</span>*<span class="number">8</span>, <span class="string">'\n\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> txts</span><br></pre></td></tr></table></figure></p><p><strong>2、将文章输出txt</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span> <span class="params">(self, name, path, txt)</span>:</span></span><br><span class="line">        write_flag = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">with</span> open(path, <span class="string">'a'</span>, encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(name + <span class="string">'\n'</span>)</span><br><span class="line">            f.writelines(txt)</span><br><span class="line">            f.write(<span class="string">'\n\n'</span>)</span><br></pre></td></tr></table></figure><h2 id="三、完整代码和效果"><a href="#三、完整代码和效果" class="headerlink" title="三、完整代码和效果"></a>三、完整代码和效果</h2><p><strong>1、完整代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/usr/bin/env Python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> string, ssl, sys</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadNovel</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span> <span class="params">(self, server)</span>:</span></span><br><span class="line">        self.server = server</span><br><span class="line">        <span class="comment"># 存放章节名</span></span><br><span class="line">        self.chapterNames = []</span><br><span class="line">        <span class="comment"># 存放章节链接</span></span><br><span class="line">        self.chapterUrls = []</span><br><span class="line">        <span class="comment"># 存放章节数</span></span><br><span class="line">        self.nums = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_download_chapter_url</span> <span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 用于爬取https</span></span><br><span class="line">        context = ssl._create_unverified_context()</span><br><span class="line">        response = urllib.request.urlopen(self.server, context = context)</span><br><span class="line">        text = str(response.read(), encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">        bf = BeautifulSoup(text, <span class="string">'html.parser'</span>)</span><br><span class="line">        div = bf.find_all(<span class="string">'div'</span>, class_ = <span class="string">'volume'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(div)):</span><br><span class="line">            li = div[i].find_all(<span class="string">'li'</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(li)):</span><br><span class="line">                a = li[j].find_all(<span class="string">'a'</span>)</span><br><span class="line">                html = BeautifulSoup(str(a), <span class="string">'lxml'</span>)</span><br><span class="line">                <span class="comment"># 章节url</span></span><br><span class="line">                self.chapterUrls.append(<span class="string">'https:'</span> + str(html.a.get(<span class="string">'href'</span>)))</span><br><span class="line">                <span class="comment"># 章节名</span></span><br><span class="line">                self.chapterNames.append(html.a.string)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_contents</span> <span class="params">(self, target)</span>:</span></span><br><span class="line">        context = ssl._create_unverified_context()</span><br><span class="line">        response = urllib.request.urlopen(target, context = context)</span><br><span class="line">        text = str(response.read(), encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">        bf = BeautifulSoup(text, <span class="string">'html.parser'</span>)</span><br><span class="line">        txts = bf.find_all(<span class="string">'div'</span>, class_=<span class="string">'read-content j_readContent'</span>)</span><br><span class="line">        txts = txts[<span class="number">0</span>].text.replace(<span class="string">'\xa0'</span>*<span class="number">8</span>, <span class="string">'\n\n'</span>)</span><br><span class="line">        <span class="keyword">return</span> txts</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span> <span class="params">(self, name, path, txt)</span>:</span></span><br><span class="line">        write_flag = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">with</span> open(path, <span class="string">'a'</span>, encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(name + <span class="string">'\n'</span>)</span><br><span class="line">            f.writelines(txt)</span><br><span class="line">            f.write(<span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    dl = DownloadNovel(<span class="string">'https://book.qidian.com/info/1012053141#Catalog'</span>)</span><br><span class="line">    dl.get_download_chapter_url()</span><br><span class="line">    print(<span class="string">'开始下载'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(dl.chapterNames)):</span><br><span class="line">        dl.write(dl.chapterNames[i], <span class="string">'无限火力大暴走.txt'</span>, dl.get_contents(dl.chapterUrls[i]))</span><br><span class="line">        sys.stdout.write(<span class="string">"  已下载:%.3f%%"</span> %  float(i/len(dl.chapterNames)) + <span class="string">'\r'</span>)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">    print(<span class="string">'下载完成'</span>)</span><br></pre></td></tr></table></figure><p><strong>2、效果</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-0cec4f9d23b8a56c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-07-07 上午9.38.46.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-22d26d9c5cff0d9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-07-07 上午9.47.04.png"></p><p>源码<a href="https://github.com/sunnyShining/python-spider/tree/master/downloadNovel" target="_blank" rel="noopener">链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从我&lt;a href=&quot;https://www.jianshu.com/p/daa4ffb4a5af&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;搬迁&lt;/p&gt;
&lt;h2 id=&quot;一、各章小说链接爬取&quot;&gt;&lt;a href=&quot;#一、各章小说链接爬取&quot; class=&quot;headerlink&quot; title=&quot;一、各章小说链接爬取&quot;&gt;&lt;/a&gt;一、各章小说链接爬取&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1、章节URL：&lt;a href=&quot;https://book.qidian.com/info/1012053141#Catalog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://book.qidian.com/info/1012053141#Catalog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="python" scheme="https://www.sunnyshining.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>react内联样式使用webpack将px转rem</title>
    <link href="https://www.sunnyshining.xyz/2018/px-to-rem/"/>
    <id>https://www.sunnyshining.xyz/2018/px-to-rem/</id>
    <published>2018-04-24T14:34:51.000Z</published>
    <updated>2018-08-24T08:44:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>从我<a href="https://www.jianshu.com/p/83bb5e97bdf3" target="_blank" rel="noopener">简书</a>搬迁</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在开发react项目时，很多时候我们把style写在css、less、scss里，经过像postcss这样的配置处理，但有没有这样一种需求呢，像有些样式我们直接写在xml标签上style里，然后也能进行处理，如px2rem能将px转rem，是否在style上写也能实现。</p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们在webpack，/.(js|jsx)?$/这样babel-loader之前（webpack从右往左）加一个loader把需要转变的px进行替换，不就好了，先找找有没有这样的loader，我找了下没找到，只能自己写一个了</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="keyword">const</span> defaultopts = &#123;</span><br><span class="line">    remUnit: <span class="number">100</span>, <span class="comment">// rem unit value (default: 100)</span></span><br><span class="line">    remFixed: <span class="number">2</span>, <span class="comment">// rem value precision (default: 2)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 获取webpack配置好的参数</span></span><br><span class="line"><span class="keyword">const</span> opts = loaderUtils.getOptions(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// 将参数组合</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">Object</span>.assign(&#123;&#125;, defaultopts, opts);</span><br><span class="line"><span class="keyword">const</span> ZPXRegExp = <span class="regexp">/\b(\d+(\.\d+)?)SUPX\b/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pxGlobalRegExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(ZPXRegExp.source, <span class="string">'g'</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cacheable) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cacheable();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 先test下有没有符合的如果有再进行替换</span></span><br><span class="line">    <span class="keyword">if</span> (pxGlobalRegExp.test(source)) &#123;</span><br><span class="line">        <span class="keyword">return</span> source.replace(pxGlobalRegExp, ($<span class="number">0</span>, $<span class="number">1</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> val = $<span class="number">1</span> / config.remUnit;</span><br><span class="line">            <span class="comment">// 精确到几位</span></span><br><span class="line">            val = <span class="built_in">parseFloat</span>(val.toFixed(config.remFixed));</span><br><span class="line">            <span class="keyword">return</span> val === <span class="number">0</span> ? val : val + <span class="string">'rem'</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    loader: path.join(rootPath, &apos;loaders/jsxPx2RemLoader&apos;),</span><br><span class="line">    options: &#123;</span><br><span class="line">        remUnit: 100,</span><br><span class="line">        remFixed: 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p><a href="https://github.com/sunnyShining/jsxStyleLoader/blob/master/tools/loaders/jsxPx2RemLoader/index.js" target="_blank" rel="noopener">https://github.com/sunnyShining/jsxStyleLoader/blob/master/tools/loaders/jsxPx2RemLoader/index.js</a></p><h2 id="赞赏"><a href="#赞赏" class="headerlink" title="赞赏"></a>赞赏</h2><p>如果你觉得我写的对你有帮助，请给我点赞助，不胜感激</p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-54db300e5da7f210.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WechatIMG42.jpg"><br><img src="https://upload-images.jianshu.io/upload_images/4605151-81f69250028678af.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WechatIMG43.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从我&lt;a href=&quot;https://www.jianshu.com/p/83bb5e97bdf3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;搬迁&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在开发react项目时，很多时候我们把style写在css、less、scss里，经过像postcss这样的配置处理，但有没有这样一种需求呢，像有些样式我们直接写在xml标签上style里，然后也能进行处理，如px2rem能将px转rem，是否在style上写也能实现。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="webpack" scheme="https://www.sunnyshining.xyz/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>解决vue init webpack project新建项目权限问题</title>
    <link href="https://www.sunnyshining.xyz/2018/vue-init-question/"/>
    <id>https://www.sunnyshining.xyz/2018/vue-init-question/</id>
    <published>2018-01-26T13:23:32.000Z</published>
    <updated>2018-08-24T08:44:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>从我<a href="https://www.jianshu.com/p/b1e9f081b32f" target="_blank" rel="noopener">简书</a>搬迁</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>最近开发项目时，同事学习vue项目时自己用官网命令vue init webpack project新建项目时出现</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/lib/node_modules/vue-cli/node_modules/rimraf/rimraf.js:313</span><br><span class="line">        throw er</span><br><span class="line">        ^</span><br><span class="line"></span><br><span class="line">Error: EACCES: permission denied, unlink <span class="string">'/Users/xxx/.vue-templates/webpack/.gitignore'</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>报错原因很明显，文件权限不够，可以在/usr/local/lib/node_modules/vue-cli/bin/ 找到vue-init这个文件，用编辑器打开发现如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Download a generate from a template repo.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; template</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadAndGenerate</span> (<span class="params">template</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> spinner = ora(<span class="string">'downloading template'</span>)</span><br><span class="line">    spinner.start()</span><br><span class="line">    <span class="comment">// Remove if local template exists</span></span><br><span class="line">    <span class="keyword">if</span> (exists(tmp)) rm(tmp)</span><br><span class="line">   download(template, tmp, &#123; clone &#125;, err =&gt; &#123;</span><br><span class="line">      spinner.stop()</span><br><span class="line">      <span class="keyword">if</span> (err) logger.fatal(<span class="string">'Failed to download repo '</span> + template + <span class="string">': '</span> + err.message.trim())</span><br><span class="line">    generate(name, tmp, to, err =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) logger.fatal(err)</span><br><span class="line">        <span class="built_in">console</span>.log()</span><br><span class="line">        logger.success(<span class="string">'Generated "%s".'</span>, name)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if (exists(tmp)) rm(tmp)这句代码便是报错原因所在，这句表示删除/Users/xxx/.vue-templates/webpack这个文件夹，然而的权限不够，导致删除失败，从而抛出错误</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>一、修改文件夹权限</p><p>1、原始文件夹权限（这个权限下正常运行）</p><p><img src="http://upload-images.jianshu.io/upload_images/4605151-3fb96bb3101a98d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p><p>2、更改文件夹权限</p><p><img src="http://upload-images.jianshu.io/upload_images/4605151-ba0666add9845a3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"></p><p>3、结果报出如下错误</p><p><img src="http://upload-images.jianshu.io/upload_images/4605151-5c9596f7d43a50b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.png"></p><p>4、改回权限即可解决错误</p><blockquote><p>tips: 一定要将权限应用到包含的项目</p></blockquote><p>二、用sudo命令运行即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vue init webpack project</span><br></pre></td></tr></table></figure></p><p>新建项目成功后，将新建的文件权限改下，否则无法开发项目</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从我&lt;a href=&quot;https://www.jianshu.com/p/b1e9f081b32f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;搬迁&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近开发项目时，同事学习vue项目时自己用官网命令vue init webpack project新建项目时出现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/lib/node_modules/vue-cli/node_modules/rimraf/rimraf.js:313&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        throw er&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Error: EACCES: permission denied, unlink &lt;span class=&quot;string&quot;&gt;&#39;/Users/xxx/.vue-templates/webpack/.gitignore&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="vue" scheme="https://www.sunnyshining.xyz/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>创建属于自己的Yeoman Generator</title>
    <link href="https://www.sunnyshining.xyz/2017/yeoman-generator/"/>
    <id>https://www.sunnyshining.xyz/2017/yeoman-generator/</id>
    <published>2017-12-03T03:22:36.000Z</published>
    <updated>2018-08-14T07:05:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近自己写了下自己项目的react的脚手架，以前一直采用种子文件进行复制，最近看到yo，想通过命令行自动去生成所需文件当然，对于Yeoman来说是大材小用，但小小的尝试也能基本掌握Yeoman的用法吧。</p><a id="more"></a><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p><strong>1.下载安装yo和generator-generator</strong></p><p>在做这个步骤之前，必须安装好node和npm，之后全局安装yo和generator-generator</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g yo</span><br><span class="line">$ sudo npm install -g generator-generator</span><br></pre></td></tr></table></figure><p><strong>2.运行generator-generator来创建我们自己需要的generator的基础框架</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yo generator</span><br></pre></td></tr></table></figure><p>回答下问题，就可以生成你需要的基础框架，如我这里的<a href="https://github.com/sunnyShining/generator-test.git" target="_blank" rel="noopener">链接</a></p><p><strong>3.准备好模版，将模版复制到generator/app/templates文件夹下</strong></p><p><strong>4.编辑index.js</strong></p><p>接下来编辑generator/app/index.js文件夹，通过提出问题，收集答案，来生成我们需要的文件。具体看代码注释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line">const Generator = require(<span class="string">'yeoman-generator'</span>);</span><br><span class="line">const chalk = require(<span class="string">'chalk'</span>);</span><br><span class="line">const yosay = require(<span class="string">'yosay'</span>);</span><br><span class="line">const _ = require(<span class="string">'lodash'</span>);</span><br><span class="line">const fs = require(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">module.exports = class extends Generator &#123;</span><br><span class="line">    <span class="function"><span class="title">prompting</span></span>() &#123;</span><br><span class="line">        // Have Yeoman greet the user.</span><br><span class="line">        this.log(yosay(</span><br><span class="line">          <span class="string">'Welcome to the kickass '</span> + chalk.red(<span class="string">'generator-test'</span>) + <span class="string">' generator!'</span></span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        const prompts = [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">type</span>: <span class="string">'list'</span>,</span><br><span class="line">                name: <span class="string">'type'</span>,</span><br><span class="line">                message: <span class="string">'请选择你要创建的类型?'</span>,</span><br><span class="line">                choices: [<span class="string">'routes'</span>, <span class="string">'components'</span>]</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="built_in">type</span>: <span class="string">'input'</span>,</span><br><span class="line">                name: <span class="string">'routesNme'</span>,</span><br><span class="line">                message: <span class="string">'请输入你要创建文件的名称！'</span>,</span><br><span class="line">                default: <span class="string">'Feed'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ];</span><br><span class="line">        // 提出问题，收集答案</span><br><span class="line">        <span class="built_in">return</span> this.prompt(prompts).<span class="keyword">then</span>(props =&gt; &#123;</span><br><span class="line">            // To access props later use this.props.someAnswer;</span><br><span class="line">            this.props = props;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">writing</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.props.type === <span class="string">'routes'</span>) &#123;</span><br><span class="line">        // 模版</span><br><span class="line">            <span class="built_in">let</span> routesTmpl = _.template(this.fs.read(this.templatePath(<span class="string">'./Feed/Feed.jsx'</span>)));</span><br><span class="line">            this.fs.write(this.destinationPath(`src/routes/<span class="variable">$&#123;this.props.routesNme&#125;</span>/<span class="variable">$&#123;this.props.routesNme&#125;</span>.jsx`), routesTmpl(&#123;</span><br><span class="line">                routes_name: this.props.routesNme</span><br><span class="line">            &#125;));</span><br><span class="line">            this.fs.copy(</span><br><span class="line">                this.templatePath(<span class="string">'./Feed/Feed.less'</span>),</span><br><span class="line">                this.destinationPath(`src/routes/<span class="variable">$&#123;this.props.routesNme&#125;</span>/<span class="variable">$&#123;this.props.routesNme&#125;</span>.less`)</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (this.props.type === <span class="string">'components'</span>) &#123;</span><br><span class="line">            <span class="built_in">let</span> routesTmpl = _.template(this.fs.read(this.templatePath(<span class="string">'./Feed/Feed.jsx'</span>)));</span><br><span class="line">            this.fs.write(this.destinationPath(`src/components/<span class="variable">$&#123;this.props.routesNme&#125;</span>.jsx`), routesTmpl(&#123;</span><br><span class="line">                routes_name: this.props.routesNme</span><br><span class="line">            &#125;));</span><br><span class="line">            this.fs.copy(</span><br><span class="line">                this.templatePath(<span class="string">'./Feed/Feed.less'</span>),</span><br><span class="line">                this.destinationPath(`src/components/<span class="variable">$&#123;this.props.routesNme&#125;</span>/<span class="variable">$&#123;this.props.routesNme&#125;</span>.less`)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">install</span></span>() &#123;</span><br><span class="line">        // this.installDependencies();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近自己写了下自己项目的react的脚手架，以前一直采用种子文件进行复制，最近看到yo，想通过命令行自动去生成所需文件当然，对于Yeoman来说是大材小用，但小小的尝试也能基本掌握Yeoman的用法吧。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="js" scheme="https://www.sunnyshining.xyz/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue如何封装一个全局组件</title>
    <link href="https://www.sunnyshining.xyz/2017/vue-loading/"/>
    <id>https://www.sunnyshining.xyz/2017/vue-loading/</id>
    <published>2017-12-03T02:40:49.000Z</published>
    <updated>2018-08-14T07:04:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>上篇介绍了如何封装一个react全局组件，这篇介绍下vue如何封装一个全局组件。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>通过Vue.extend(options)，使用基础 Vue 构造器，创建一个子类，再创建这个子类的实例，挂载到body元素上。具体看代码注释。</p><a id="more"></a><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>index.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import Vue from <span class="string">'vue'</span>;</span><br><span class="line">import Loading from <span class="string">'./loading'</span>;</span><br><span class="line">// 创建一个“子类”</span><br><span class="line"><span class="built_in">let</span> LoadingC = Vue.extend(Loading);</span><br><span class="line"><span class="built_in">let</span> instance;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">    open (options = &#123;&#125;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            this.initInstance(options);</span><br><span class="line">        &#125;</span><br><span class="line">        instance.visible = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    initInstance (options) &#123;</span><br><span class="line">    // 创建子类实例</span><br><span class="line">        instance = new LoadingC(&#123;</span><br><span class="line">            el: document.createElement(<span class="string">'div'</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        // 传入属性</span><br><span class="line">        instance.text = options.text || <span class="string">'加载中'</span>;</span><br><span class="line">        <span class="keyword">for</span> (var prop <span class="keyword">in</span> options) &#123;</span><br><span class="line">            <span class="keyword">if</span> (options.hasOwnProperty(prop)) &#123;</span><br><span class="line">                instance[prop] = options[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 插到body里</span><br><span class="line">        document.body.appendChild(instance.<span class="variable">$el</span>);</span><br><span class="line">        Vue.nextTick(() =&gt; &#123;</span><br><span class="line">            instance.visible = <span class="literal">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">close</span></span> () &#123;</span><br><span class="line">        instance.visible = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>loading.vue<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=<span class="string">"loading"</span> v-show=<span class="string">"visible"</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">"loading-mask"</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">"loading-outter"</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">"loading-wrap"</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">"loading-ring"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">"loading-rect"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">"loading-text"</span>&gt;&#123;&#123; text &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">        text: &#123;</span><br><span class="line">            <span class="built_in">type</span>: String,</span><br><span class="line">            default: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">data</span></span> () &#123;</span><br><span class="line">        <span class="built_in">return</span> &#123;</span><br><span class="line">            visible: <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">created</span></span> () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=<span class="string">"scss"</span> scoped&gt;</span><br><span class="line">.loading&#123;</span><br><span class="line">transition: opacity .3s linear;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 100%;</span><br><span class="line">position: fixed;</span><br><span class="line">display: block;</span><br><span class="line">text-align: center;</span><br><span class="line">top: 0;</span><br><span class="line">background-color: transparent;//背景透明</span><br><span class="line">z-index: 9999;</span><br><span class="line">&amp;:after&#123;</span><br><span class="line">content: <span class="string">""</span>;</span><br><span class="line">display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">.loading-mask&#123;</span><br><span class="line">position: fixed;</span><br><span class="line">top: 0;</span><br><span class="line">left: 0;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 100%;</span><br><span class="line">background-color: rgba(0, 0, 0, .2);</span><br><span class="line">&#125;</span><br><span class="line">.loading-outter &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: 50%;</span><br><span class="line">    margin-top: -0.35rem;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    background-color: <span class="comment">#222;</span></span><br><span class="line">    border-radius: .5rem;</span><br><span class="line">    height: .75rem;</span><br><span class="line">&#125;</span><br><span class="line">.loading-wrap &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: .56rem;</span><br><span class="line">    height: .56rem;</span><br><span class="line">    top: .094rem;</span><br><span class="line">    left: .09rem</span><br><span class="line">&#125;</span><br><span class="line">.loading-ring &#123;</span><br><span class="line">    width: .56rem;</span><br><span class="line">    height: .56rem;</span><br><span class="line">    background-image: url(<span class="string">"../../../assets/images/loading.svg"</span>);</span><br><span class="line">    background-size: cover;</span><br><span class="line">    position: absolute;</span><br><span class="line">&#125;</span><br><span class="line">.loading-rect &#123;</span><br><span class="line">    height: .18rem;</span><br><span class="line">    width: .18rem;</span><br><span class="line">    background-color: <span class="comment">#FD404A;</span></span><br><span class="line">    border-radius: .05rem;</span><br><span class="line">    -webkit-transform: rotate3D(0, 0, 1, 45deg);</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: .28rem;</span><br><span class="line">    top: .28rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading-text &#123;</span><br><span class="line">    text-align: left;</span><br><span class="line">    color: <span class="comment">#fff;</span></span><br><span class="line">    font-size: .24rem;</span><br><span class="line">    font-family: sans-serif;</span><br><span class="line">    line-height: .75rem;</span><br><span class="line">    padding-left: .85rem;</span><br><span class="line">    padding-right: .26rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading-enter,</span><br><span class="line">.loading-leave-active &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;上篇介绍了如何封装一个react全局组件，这篇介绍下vue如何封装一个全局组件。&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;通过Vue.extend(options)，使用基础 Vue 构造器，创建一个子类，再创建这个子类的实例，挂载到body元素上。具体看代码注释。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="vue" scheme="https://www.sunnyshining.xyz/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>react如何封装一个全局组件</title>
    <link href="https://www.sunnyshining.xyz/2017/loading/"/>
    <id>https://www.sunnyshining.xyz/2017/loading/</id>
    <published>2017-11-29T13:59:29.000Z</published>
    <updated>2018-08-14T07:04:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>react如何封装一个组件？相信，一百度网上一大把，当我想通过message.error(‘错误’)，这样的提示的时候，我们想拥有一个全局组件来调用，当我查阅资料时，并没有太多关于这个的讲解，所以想自己动手写一个。</p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们可以通过<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> div = document.createElement(<span class="string">'div'</span>);</span><br><span class="line">document.body.appendChild(div);</span><br></pre></td></tr></table></figure></p><p>创建一个div，插到body里，再通过ReactDOM，将属性和你要写的组件样子传入，如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(React.createElement(Loading, props), div);</span><br></pre></td></tr></table></figure></p><p>最后在你不需要它的时候，摧毁它，如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.unmountComponentAtNode(div);</span><br><span class="line">document.body.removeChild(div);</span><br></pre></td></tr></table></figure></p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><p>index.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import Loading from <span class="string">'./src/Loading.jsx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> loadingInstance = 0;</span><br><span class="line"><span class="built_in">let</span> getLoadingInstance = (tip) =&gt; &#123;</span><br><span class="line">    loadingInstance = loadingInstance || Loading.newInstance(&#123;</span><br><span class="line">        tip,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">return</span> loadingInstance;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">    open(tip = <span class="string">'加载中...'</span>) &#123;</span><br><span class="line">        getLoadingInstance(tip);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">close</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (loadingInstance) &#123;</span><br><span class="line">            loadingInstance.destroy();</span><br><span class="line">            loadingInstance = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Loading.jsx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from <span class="string">'react'</span>;</span><br><span class="line">import PropTypes from <span class="string">'prop-types'</span>;</span><br><span class="line">import ReactDOM from <span class="string">'react-dom'</span>;</span><br><span class="line">import <span class="string">'./Loading.less'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default class Loading extends Component &#123;</span><br><span class="line"><span class="function"><span class="title">render</span></span>() &#123;</span><br><span class="line">        <span class="built_in">let</span> &#123; tip &#125; = this.props;</span><br><span class="line">        console.log(tip);</span><br><span class="line"><span class="built_in">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"loading"</span>&gt;</span><br><span class="line">                &lt;div className=<span class="string">"loading-mask"</span>&gt;</span><br><span class="line">                    &lt;div className=<span class="string">"loading-outter"</span>&gt;</span><br><span class="line">                        &lt;div className=<span class="string">"loading-wrap"</span>&gt;</span><br><span class="line">                            &lt;div className=<span class="string">"loading-ring"</span> /&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div className=<span class="string">"loading-rect"</span> /&gt;</span><br><span class="line">                        &lt;div className=<span class="string">"loading-text"</span>&gt;&#123; tip &#125;&lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Loading.propTypes = &#123;</span><br><span class="line">    tip: PropTypes.string,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Loading.newInstance = <span class="keyword">function</span> newNotificationInstance(properties) &#123;</span><br><span class="line">    <span class="built_in">let</span> props = properties || &#123;&#125;;</span><br><span class="line">    <span class="built_in">let</span> div = document.createElement(<span class="string">'div'</span>);</span><br><span class="line">    document.body.appendChild(div);</span><br><span class="line">    <span class="built_in">let</span> notification = ReactDOM.render(React.createElement(Loading, props), div);</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">destroy</span></span>() &#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(div);</span><br><span class="line">            document.body.removeChild(div);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Loading.less<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">.loading&#123;</span><br><span class="line">    transition: opacity .3s linear;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    position: fixed;</span><br><span class="line">    display: block;</span><br><span class="line">    text-align: center;</span><br><span class="line">    top: 0;</span><br><span class="line">    background-color: transparent;//背景透明</span><br><span class="line">    z-index: 9999;</span><br><span class="line">    &amp;:after&#123;</span><br><span class="line">        content: <span class="string">""</span>;</span><br><span class="line">        display: inline-block;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.loading-mask&#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background-color: rgba(0, 0, 0, .2);</span><br><span class="line">&#125;</span><br><span class="line">.loading-outter &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: 50%;</span><br><span class="line">    margin-top: -0.35rem;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    background-color: <span class="comment">#222;</span></span><br><span class="line">    border-radius: .5rem;</span><br><span class="line">    height: .75rem;</span><br><span class="line">&#125;</span><br><span class="line">.loading-wrap &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: .56rem;</span><br><span class="line">    height: .56rem;</span><br><span class="line">    top: .094rem;</span><br><span class="line">    left: .09rem</span><br><span class="line">&#125;</span><br><span class="line">.loading-ring &#123;</span><br><span class="line">    width: .56rem;</span><br><span class="line">    height: .56rem;</span><br><span class="line">    background-image: url(<span class="string">"../../../assets/images/loading.svg"</span>);</span><br><span class="line">    background-size: cover;</span><br><span class="line">    position: absolute;</span><br><span class="line">&#125;</span><br><span class="line">.loading-rect &#123;</span><br><span class="line">    height: .18rem;</span><br><span class="line">    width: .18rem;</span><br><span class="line">    background-color: <span class="comment">#FD404A;</span></span><br><span class="line">    border-radius: .05rem;</span><br><span class="line">    -webkit-transform: rotate3D(0, 0, 1, 45deg);</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: .28rem;</span><br><span class="line">    top: .28rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading-text &#123;</span><br><span class="line">    text-align: left;</span><br><span class="line">    color: <span class="comment">#fff;</span></span><br><span class="line">    font-size: .24rem;</span><br><span class="line">    font-family: sans-serif;</span><br><span class="line">    line-height: .75rem;</span><br><span class="line">    padding-left: .85rem;</span><br><span class="line">    padding-right: .26rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading-enter,</span><br><span class="line">.loading-leave-active &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="具体代码参考我的github"><a href="#具体代码参考我的github" class="headerlink" title="具体代码参考我的github"></a>具体代码参考我的<a href="https://github.com/sunnyShining/react-demo" target="_blank" rel="noopener">github</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;react如何封装一个组件？相信，一百度网上一大把，当我想通过message.error(‘错误’)，这样的提示的时候，我们想拥有一个全局组件来调用，当我查阅资料时，并没有太多关于这个的讲解，所以想自己动手写一个。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="react" scheme="https://www.sunnyshining.xyz/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>js实现jquery的offset()方法(获取当前元素相对于文档的偏移量)</title>
    <link href="https://www.sunnyshining.xyz/2017/offset/"/>
    <id>https://www.sunnyshining.xyz/2017/offset/</id>
    <published>2017-11-28T14:43:46.000Z</published>
    <updated>2018-08-24T08:44:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>从我<a href="https://www.jianshu.com/p/e8965308d7e9" target="_blank" rel="noopener">简书</a>搬迁</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近做项目，由于zepto使用的功能较少，想将zepto的功能用较少原生实现，其中有个实现zepto的offset()方法取到各种值的难为了我，我百度了下，大体网上千篇一律的这样写到</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">这篇文章主要介绍了js实现jquery的offset()方法,实例分析了jquery的offset()方法原理与采用javascript实现的技巧,具有一定参考借鉴价值,需要的朋友可以参考下</span><br><span class="line">本文实例讲述了js实现jquery的offset()方法。分享给大家供大家参考。具体分析如下：</span><br><span class="line">用过jQuery的offset()的同学都知道offset().top或offset().left很方便地取得元素相对于整个页面的偏移。</span><br><span class="line">而在js里，没有这样直接的方法，节点的属性offsetTop可以获得该节点相对于父节点的相对偏移，但不能直接获得其绝对偏移，我们可用节点逐层递归向上来相加offsetTop来获得绝对偏移。</span><br><span class="line">复制代码代码如下:</span><br><span class="line"><span class="keyword">function</span> getOffset(Node, offset) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!offset) &#123;</span><br><span class="line">          offset = &#123;&#125;;</span><br><span class="line">          offset.top = 0; </span><br><span class="line">          offset.left = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Node == document.body) &#123;</span><br><span class="line">        //当该节点为body节点时，结束递归</span><br><span class="line">        <span class="built_in">return</span> offset;   </span><br><span class="line">    &#125;</span><br><span class="line">    offset.top += Node.offsetTop;</span><br><span class="line">offset.left += Node.offsetLeft;</span><br><span class="line">    <span class="built_in">return</span> getOffset(Node.parentNode, offset); //向上累加offset里的值</span><br><span class="line">&#125;</span><br><span class="line">使用时，则如：</span><br><span class="line">复制代码代码如下:</span><br><span class="line">var a = document.getElementById(<span class="string">'a'</span>); // getOffset(a).top // getOffset(a).left</span><br><span class="line">希望本文所述对大家的javascript程序设计有所帮助。</span><br></pre></td></tr></table></figure><p>我本着试试看的态度将这个方法炒了上去，打印出值结果与我需要的值相差甚远，为此我仔细翻了下源码，源码见下面链接<br><a href="http://blog.csdn.net/liangklfang/article/details/49229231" target="_blank" rel="noopener">源码</a><br>找到如下方法getBoundingClientRect，翻了下caniuse发现兼容性还好（本人移动端），故可以写成以下方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 获取当前元素相对于文档的偏移量</span><br><span class="line"><span class="built_in">let</span> getOffset = (elem) =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> docElem = document.documentElement;</span><br><span class="line">    <span class="built_in">let</span> box = elem.getBoundingClientRect();</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">            top: box.top  +  docElem.scrollTop ,</span><br><span class="line">            left: box.left + docElem.scrollLeft</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>如果要考虑兼容性，请仔细看zepto源码<br>另外上述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getOffset(Node, offset) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!offset) &#123;</span><br><span class="line">          offset = &#123;&#125;;</span><br><span class="line">          offset.top = 0;</span><br><span class="line">          offset.left = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Node == document.body) &#123;</span><br><span class="line">        // 当该节点为body节点时，结束递归</span><br><span class="line">        <span class="built_in">return</span> offset;</span><br><span class="line">     &#125;</span><br><span class="line">    offset.top += Node.offsetTop;</span><br><span class="line">    offset.left += Node.offsetLeft;</span><br><span class="line">    <span class="built_in">return</span> getOffset(Node.parentNode, offset); // 向上累加offset里的值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getOffset(Node, offset) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!offset) &#123;</span><br><span class="line">          offset = &#123;&#125;;</span><br><span class="line">          offset.top = 0;</span><br><span class="line">          offset.left = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Node == document.body) &#123;</span><br><span class="line">        // 当该节点为body节点时，结束递归</span><br><span class="line">        <span class="built_in">return</span> offset;</span><br><span class="line">    &#125;</span><br><span class="line">    offset.top += Node.offsetTop;</span><br><span class="line">    offset.left += Node.offsetLeft;</span><br><span class="line">    <span class="built_in">return</span> getOffset(Node.offsetParent, offset); // 向上累加offset里的值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以实现</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从我&lt;a href=&quot;https://www.jianshu.com/p/e8965308d7e9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;搬迁&lt;/p&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;最近做项目，由于zepto使用的功能较少，想将zepto的功能用较少原生实现，其中有个实现zepto的offset()方法取到各种值的难为了我，我百度了下，大体网上千篇一律的这样写到&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="js" scheme="https://www.sunnyshining.xyz/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>python3 numpy</title>
    <link href="https://www.sunnyshining.xyz/2017/python-numpy/"/>
    <id>https://www.sunnyshining.xyz/2017/python-numpy/</id>
    <published>2017-10-10T08:21:23.000Z</published>
    <updated>2018-10-04T04:14:29.794Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载自<a href="https://blog.csdn.net/wc781708249/article/details/78194039?locationNum=10&amp;fps=1" target="_blank" rel="noopener">https://blog.csdn.net/wc781708249/article/details/78194039?locationNum=10&amp;fps=1</a></p></blockquote><p>参考地址：</p><p>1、<a href="https://www.shiyanlou.com/courses/912" target="_blank" rel="noopener">https://www.shiyanlou.com/courses/912</a></p><p>2、<a href="https://www.shiyanlou.com/courses/348" target="_blank" rel="noopener">https://www.shiyanlou.com/courses/348</a></p><p>3、<a href="https://docs.scipy.org/doc/numpy/reference/" target="_blank" rel="noopener">https://docs.scipy.org/doc/numpy/reference/</a></p><p>4、<a href="https://docs.scipy.org/doc/numpy/user/index.html#user" target="_blank" rel="noopener">https://docs.scipy.org/doc/numpy/user/index.html#user</a></p><p>5、<a href="http://scipy.github.io/old-wiki/pages/Tentative_NumPy_Tutorial" target="_blank" rel="noopener">http://scipy.github.io/old-wiki/pages/Tentative_NumPy_Tutorial</a></p><p>6、<a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html" target="_blank" rel="noopener">https://docs.scipy.org/doc/numpy-dev/user/quickstart.html</a></p><a id="more"></a><h2 id="1、Numpy-数值类型"><a href="#1、Numpy-数值类型" class="headerlink" title="1、Numpy 数值类型"></a>1、Numpy 数值类型</h2><p>Python本身支持的数值类型有<code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">int</code>（整型，python2中存在long长整型）、<code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">float</code>（浮点型）、<code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">bool</code>（布尔型）和<code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">complex</code>（复数型）。</p><p>而 Numpy 支持比 Python 本身更为丰富的数值类型，细分如下：</p><ol><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">bool</code>：布尔类型，1 个字节，值为 True 或 False。</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">int</code>：整数类型，通常为 int64 或 int32 。</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">intc</code>：与 C 里的 int 相同，通常为 int32 或 int64。</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">intp</code>：用于索引，通常为 int32 或 int64。</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">int8</code>：字节（从 -128 到 127）</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">int16</code>：整数（从 -32768 到 32767）</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">int32</code>：整数（从 -2147483648 到 2147483647）</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">int64</code>：整数（从 -9223372036854775808 到 9223372036854775807）</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">uint8</code>：无符号整数（从 0 到 255）</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">uint16</code>：无符号整数（从 0 到 65535）</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">uint32</code>：无符号整数（从 0 到 4294967295）</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">uint64</code>：无符号整数（从 0 到 18446744073709551615）</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">float</code>：float64 的简写。</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">float16</code>：半精度浮点，5 位指数，10 位尾数</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">float32</code>：单精度浮点，8 位指数，23 位尾数</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">float64</code>：双精度浮点，11 位指数，52 位尾数</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">complex</code>：complex128 的简写。</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">complex64</code>：复数，由两个 32 位浮点表示。</li><li><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:14.4px;color:rgb(199,37,78);background-color:rgb(249,242,244);">complex128</code>：复数，由两个 64 位浮点表示。</li></ol><p>在 Numpy 中，上面提到的这些数值类型都被归于 dtype（data-type） 对象的实例。<br>我们可以用 numpy.dtype(object, align, copy) 来指定数值类型。而在数组里面，可以用 dtype= 参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>], dtype=np.float64) <span class="comment"># 指定 1 维数组的数值类型为 float64</span></span><br></pre></td></tr></table></figure><p>另外，你可以使用 .astype() 方法在不同的数值类型之间相互转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.astype(int) <span class="comment"># 将 a 的数值类型从 float64 转换为 int</span></span><br></pre></td></tr></table></figure><p>最后，你可以使用 .dtype 来查看 dtype 属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.dtype <span class="comment"># 查看 a 的数值类型</span></span><br></pre></td></tr></table></figure><h2 id="2、Numpy-多维数组"><a href="#2、Numpy-多维数组" class="headerlink" title="2、Numpy 多维数组"></a>2、Numpy 多维数组</h2><h3 id="2-1-ndarray-介绍"><a href="#2-1-ndarray-介绍" class="headerlink" title="2.1 ndarray 介绍"></a>2.1 ndarray 介绍</h3><p>在 python 内建对象中，数组有三种形式：</p><ol><li>list 列表：[1, 2, 3]</li><li>Tuple 元组：(1, 2, 3, 4, 5)</li><li>Dict 字典：{A:1, B:2}</li></ol><p>Numpy最核心且最重要的一个特性就是ndarray多维数组对象，它区别于python的标准类，拥有对高维数组的处理能力，这也是数值计算过程中缺一不可的重要特性。</p><p>Numpy中，ndarray类具有六个参数，它们分别为：</p><ol><li>shape：数组的形状。</li><li>dtype：数据类型。</li><li>buffer：对象暴露缓冲区接口。</li><li>offset：数组数据的偏移量。</li><li>strides：数据步长。</li><li>order：{‘C’，’F’}，以行或列为主排列顺序。</li></ol><p>下面，我们来了解创建 ndarray 的一些方法。在 numpy 中，我们主要通过以下 5 种途径创建数组，它们分别是：</p><ol><li>从 Python 数组结构列表，元组等转换。</li><li>使用 np.arange、np.ones、np.zeros 等 numpy 原生方法。</li><li>从存储空间读取数组。</li><li>通过使用字符串或缓冲区从原始字节创建数组。</li><li>使用特殊函数，如 random。</li></ol><h3 id="2-2-从列表或元组转换"><a href="#2-2-从列表或元组转换" class="headerlink" title="2.2 从列表或元组转换"></a>2.2 从列表或元组转换</h3><p>在 numpy 中，我们使用 numpy.array 将列表或元组转换为 ndarray 数组。其方法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.array(object, dtype=<span class="keyword">None</span>, copy=<span class="keyword">True</span>, order=<span class="keyword">None</span>, subok=<span class="keyword">False</span>, ndmin=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>其中，参数：</p><ul><li>object：列表、元组等。</li><li>dtype：数据类型。如果未给出，则类型为被保存对象所需的最小类型。</li><li>copy：布尔来写，默认 True，表示复制对象。</li><li>order：顺序。</li><li>subok：布尔类型，表示子类是否被传递。</li><li>ndmin：生成的数组应具有的最小维数。</li></ul><p>下面，通过列表创建一个 ndarray 数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.array([[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]],[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]],[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]])</span><br></pre></td></tr></table></figure><p>或者是列表和元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.array([(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">4</span>),(<span class="number">5</span>,<span class="number">6</span>)])</span><br></pre></td></tr></table></figure><h3 id="2-3-arange-方法创建"><a href="#2-3-arange-方法创建" class="headerlink" title="2.3 arange 方法创建"></a>2.3 arange 方法创建</h3><p>除了直接使用 array 方法创建 ndarray，在 numpy 中还有一些方法可以创建一些有规律性的多维数。首先，我们来看一看 arange()。arange() 的功能是在给定区间内创建一系列均匀间隔的值。方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.arange(start, stop, step, dtype=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>你需要先设置值所在的区间，这里为[开始， 停止），你应该能发现这是一个半开半闭区间。然后，在设置 step 步长用于设置值之间的间隔。最后的可选参数 dtype可以设置返回ndarray 的值类型。<br>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 在区间 [3, 7) 中以 0.5 为步长新建数组</span></span><br><span class="line">np.arange(<span class="number">3</span>, <span class="number">7</span>, <span class="number">0.5</span>, dtype=<span class="string">'float32'</span>)</span><br><span class="line"><span class="comment"># array([ 3. ,  3.5,  4. ,  4.5,  5. ,  5.5,  6. ,  6.5], dtype=float32)</span></span><br></pre></td></tr></table></figure><h3 id="2-4-linspace-方法创建"><a href="#2-4-linspace-方法创建" class="headerlink" title="2.4 linspace 方法创建"></a>2.4 linspace 方法创建</h3><p>linspace方法也可以像arange方法一样，创建数值有规律的数组。linspace用于在指定的区间内返回间隔均匀的值。其方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.linspace(start, stop, num=<span class="number">50</span>, endpoint=<span class="keyword">True</span>, retstep=<span class="keyword">False</span>, dtype=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><ul><li>start：序列的起始值。</li><li>stop：序列的结束值。</li><li>num：生成的样本数。默认值为50。</li><li>endpoint：布尔值，如果为真，则最后一个样本包含在序列内。</li><li>retstep：布尔值，如果为真，返回间距。</li><li>dtype：数组的类型。</li></ul><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">10</span>, endpoint=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># array([  0.      ,   1.11111111,   2.22222222,   3.33333333,</span></span><br><span class="line">         <span class="number">4.44444444</span>,   <span class="number">5.55555556</span>,   <span class="number">6.66666667</span>,   <span class="number">7.77777778</span>,</span><br><span class="line">         <span class="number">8.88888889</span>,  <span class="number">10.</span>        ])</span><br><span class="line">np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">10</span>, endpoint=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.])</span></span><br></pre></td></tr></table></figure><h3 id="2-5-ones-方法创建"><a href="#2-5-ones-方法创建" class="headerlink" title="2.5 ones 方法创建"></a>2.5 ones 方法创建</h3><p>numpy.ones 用于快速创建数值全部为 1 的多维数组。其方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.ones(shape, dtype=<span class="keyword">None</span>, order=<span class="string">'C'</span>)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>shape：用于指定数组形状，例如（1， 2）或 3。</li><li>dtype：数据类型。</li><li>order：{‘C’，’F’}，按行或列方式储存数组。</li></ul><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.ones((<span class="number">2</span>,<span class="number">3</span>)))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[ 1.  1.  1.]</span></span><br><span class="line"><span class="string"> [ 1.  1.  1.]]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="2-6-zeros-方法创建"><a href="#2-6-zeros-方法创建" class="headerlink" title="2.6 zeros 方法创建"></a>2.6 zeros 方法创建</h3><p>zeros 方法和上面的 ones 方法非常相似，不同的地方在于，这里全部填充为 0。zeros 方法和 ones 是一致的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.zeros(shape, dtype=<span class="keyword">None</span>, order=<span class="string">'C'</span>)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>shape：用于指定数组形状，例如（1， 2）或3。</li><li>dtype：数据类型。</li><li>order：{‘C’，’F’}，按行或列方式储存数组。</li></ul><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.zeros((<span class="number">3</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 0.  0.]</span></span><br><span class="line"><span class="string"> [ 0.  0.]</span></span><br><span class="line"><span class="string"> [ 0.  0.]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="2-7-eye-方法创建"><a href="#2-7-eye-方法创建" class="headerlink" title="2.7 eye 方法创建"></a>2.7 eye 方法创建</h3><p>numpy.eye 用于创建一个二维数组，其特点是k 对角线上的值为 1，其余值全部为0。方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.eye(N, M=<span class="keyword">None</span>, k=<span class="number">0</span>, dtype=&lt;type <span class="string">'float'</span>&gt;)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>N：输出数组的行数。</li><li>M：输出数组的列数。</li><li>k：对角线索引：0（默认）是指主对角线，正值是指上对角线，负值是指下对角线。</li></ul><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.eye(<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 0.  0.  0.  1.]</span></span><br><span class="line"><span class="string"> [ 0.  0.  0.  0.]</span></span><br><span class="line"><span class="string"> [ 0.  0.  0.  0.]</span></span><br><span class="line"><span class="string"> [ 0.  0.  0.  0.]</span></span><br><span class="line"><span class="string"> [ 0.  0.  0.  0.]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(np.eye(<span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 1.  0.  0.  0.]</span></span><br><span class="line"><span class="string"> [ 0.  1.  0.  0.]</span></span><br><span class="line"><span class="string"> [ 0.  0.  1.  0.]</span></span><br><span class="line"><span class="string"> [ 0.  0.  0.  1.]</span></span><br><span class="line"><span class="string"> [ 0.  0.  0.  0.]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(np.eye(<span class="number">5</span>, <span class="number">4</span>, <span class="number">-1</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 0.  0.  0.  0.]</span></span><br><span class="line"><span class="string"> [ 1.  0.  0.  0.]</span></span><br><span class="line"><span class="string"> [ 0.  1.  0.  0.]</span></span><br><span class="line"><span class="string"> [ 0.  0.  1.  0.]</span></span><br><span class="line"><span class="string"> [ 0.  0.  0.  1.]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="2-8-从已知数据创建"><a href="#2-8-从已知数据创建" class="headerlink" title="2.8 从已知数据创建"></a>2.8 从已知数据创建</h3><p>我们还可以从已知数据文件、函数中创建 ndarray。numpy 提供了下面 5 个方法：</p><ol><li>frombuffer（buffer）：将缓冲区转换为 1 维数组。</li><li>fromfile（file，dtype，count，sep）：从文本或二进制文件中构建多维数组。</li><li>fromfunction（function，shape）：通过函数返回值来创建多维数组。</li><li>fromiter（iterable，dtype，count）：从可迭代对象创建 1 维数组。</li><li>fromstring（string，dtype，count，sep）：从字符串中创建 1 维数组。</li></ol><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.fromfunction(<span class="keyword">lambda</span> a, b: a + b, (<span class="number">5</span>, <span class="number">4</span>)))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[ 0.  1.  2.  3.]</span></span><br><span class="line"><span class="string"> [ 1.  2.  3.  4.]</span></span><br><span class="line"><span class="string"> [ 2.  3.  4.  5.]</span></span><br><span class="line"><span class="string"> [ 3.  4.  5.  6.]</span></span><br><span class="line"><span class="string"> [ 4.  5.  6.  7.]]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="2-9-linspace-与-logspace"><a href="#2-9-linspace-与-logspace" class="headerlink" title="2.9 linspace 与 logspace"></a>2.9 linspace 与 logspace</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># using linspace, both end points ARE included</span></span><br><span class="line">linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">=&gt; array([  0.        ,   0.41666667,   0.83333333,   1.25      ,</span><br><span class="line">            <span class="number">1.66666667</span>,   <span class="number">2.08333333</span>,   <span class="number">2.5</span>       ,   <span class="number">2.91666667</span>,</span><br><span class="line">            <span class="number">3.33333333</span>,   <span class="number">3.75</span>      ,   <span class="number">4.16666667</span>,   <span class="number">4.58333333</span>,</span><br><span class="line">            <span class="number">5.</span>        ,   <span class="number">5.41666667</span>,   <span class="number">5.83333333</span>,   <span class="number">6.25</span>      ,</span><br><span class="line">            <span class="number">6.66666667</span>,   <span class="number">7.08333333</span>,   <span class="number">7.5</span>       ,   <span class="number">7.91666667</span>,</span><br><span class="line">            <span class="number">8.33333333</span>,   <span class="number">8.75</span>      ,   <span class="number">9.16666667</span>,   <span class="number">9.58333333</span>,  <span class="number">10.</span>        ])</span><br><span class="line"></span><br><span class="line">logspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">10</span>, base=e)</span><br><span class="line"></span><br><span class="line">=&gt; array([  1.00000000e+00,   3.03773178e+00,   9.22781435e+00,</span><br><span class="line">            <span class="number">2.80316249e+01</span>,   <span class="number">8.51525577e+01</span>,   <span class="number">2.58670631e+02</span>,</span><br><span class="line">            <span class="number">7.85771994e+02</span>,   <span class="number">2.38696456e+03</span>,   <span class="number">7.25095809e+03</span>,</span><br><span class="line">            <span class="number">2.20264658e+04</span>])</span><br></pre></td></tr></table></figure><h3 id="2-10-mgrid"><a href="#2-10-mgrid" class="headerlink" title="2.10 mgrid"></a>2.10 mgrid</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x, y = mgrid[<span class="number">0</span>:<span class="number">5</span>, <span class="number">0</span>:<span class="number">5</span>] <span class="comment"># similar to meshgrid in MATLAB</span></span><br><span class="line"></span><br><span class="line">x</span><br><span class="line">=&gt; array([[0, 0, 0, 0, 0],</span><br><span class="line">          [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">          [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">          [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">          [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line">y</span><br><span class="line">=&gt; array([[0, 1, 2, 3, 4],</span><br><span class="line">          [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">          [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">          [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">          [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure><h3 id="2-11-diag"><a href="#2-11-diag" class="headerlink" title="2.11 diag"></a>2.11 diag</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a diagonal matrix</span></span><br><span class="line">diag([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">=&gt; array([[1, 0, 0],</span><br><span class="line">          [<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">          [<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># diagonal with offset from the main diagonal</span></span><br><span class="line">diag([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], k=<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line">=&gt; array([[0, 1, 0, 0],</span><br><span class="line">          [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">          [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">          [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</span><br></pre></td></tr></table></figure><h3 id="2-12-文件-I-O-创建数组"><a href="#2-12-文件-I-O-创建数组" class="headerlink" title="2.12 文件 I/O 创建数组"></a>2.12 文件 I/O 创建数组</h3><h4 id="2-12-1-CSV"><a href="#2-12-1-CSV" class="headerlink" title="2.12.1 CSV"></a>2.12.1 CSV</h4><p>CSV是一种常用的数据格式化文件类型，为了从中读取数据，我们使用 numpy.genfromtxt 函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget http://labfile.oss.aliyuncs.com/courses/348/stockholm_td_adj.dat</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">data = np.genfromtxt(<span class="string">'stockholm_td_adj.dat'</span>)</span><br><span class="line">print(data.shape) <span class="comment"># (77431, 7)</span></span><br><span class="line"> </span><br><span class="line">data = np.loadtxt(<span class="string">'stockholm_td_adj.dat'</span>)</span><br><span class="line">print(data.shape) <span class="comment"># (77431, 7)</span></span><br><span class="line"> </span><br><span class="line">data = np.mafromtxt(<span class="string">'stockholm_td_adj.dat'</span>)</span><br><span class="line">print(data.shape) <span class="comment"># (77431, 7)</span></span><br><span class="line"> </span><br><span class="line">data = np.ndfromtxt(<span class="string">'stockholm_td_adj.dat'</span>)</span><br><span class="line">print(data.shape) <span class="comment"># (77431, 7)</span></span><br><span class="line"> </span><br><span class="line">data = np.recfromtxt(<span class="string">'stockholm_td_adj.dat'</span>)</span><br><span class="line">print(data.shape) <span class="comment"># (77431, )</span></span><br></pre></td></tr></table></figure><p>使用 numpy.savetxt 我们可以将 Numpy 数组保存到csv文件中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">M = random.rand(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">M</span><br><span class="line">å</span><br><span class="line">=&gt; array([[ 0.70506801,  0.54618952,  0.31039856],</span><br><span class="line">          [ <span class="number">0.26640475</span>,  <span class="number">0.10358152</span>,  <span class="number">0.73231132</span>],</span><br><span class="line">          [ <span class="number">0.07987128</span>,  <span class="number">0.34462854</span>,  <span class="number">0.91114433</span>]])</span><br><span class="line"></span><br><span class="line">savetxt(<span class="string">"random-matrix.csv"</span>, M)</span><br><span class="line"></span><br><span class="line">!cat random-matrix.csv</span><br><span class="line"></span><br><span class="line">=&gt; 7.050680113576863750e-01 5.461895177867910345e-01 3.103985627238065037e-01</span><br><span class="line">   <span class="number">2.664047486311884594e-01</span> <span class="number">1.035815249084012235e-01</span> <span class="number">7.323113219935466489e-01</span></span><br><span class="line">   <span class="number">7.987128326702574999e-02</span> <span class="number">3.446285401590922781e-01</span> <span class="number">9.111443300153220237e-01</span></span><br><span class="line"></span><br><span class="line">savetxt(<span class="string">"random-matrix.csv"</span>, M, fmt=<span class="string">'%.5f'</span>) <span class="comment"># fmt specifies the format</span></span><br><span class="line"></span><br><span class="line">!cat random-matrix.csv</span><br><span class="line"></span><br><span class="line">=&gt; 0.70507 0.54619 0.31040</span><br><span class="line">   <span class="number">0.26640</span> <span class="number">0.10358</span> <span class="number">0.73231</span></span><br><span class="line">   <span class="number">0.07987</span> <span class="number">0.34463</span> <span class="number">0.91114</span></span><br></pre></td></tr></table></figure><h4 id="2-12-2-Numpy-原生文件类型"><a href="#2-12-2-Numpy-原生文件类型" class="headerlink" title="2.12.2 Numpy 原生文件类型"></a>2.12.2 Numpy 原生文件类型</h4><p>使用 numpy.save 与 numpy.load 保存和读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">save(<span class="string">"random-matrix.npy"</span>, M)</span><br><span class="line"></span><br><span class="line">!file random-matrix.npy</span><br><span class="line"></span><br><span class="line">=&gt; random-matrix.npy: data</span><br><span class="line"></span><br><span class="line">load(<span class="string">"random-matrix.npy"</span>)</span><br><span class="line"></span><br><span class="line">=&gt; array([[ 0.70506801,  0.54618952,  0.31039856],</span><br><span class="line">          [ <span class="number">0.26640475</span>,  <span class="number">0.10358152</span>,  <span class="number">0.73231132</span>],</span><br><span class="line">          [ <span class="number">0.07987128</span>,  <span class="number">0.34462854</span>,  <span class="number">0.91114433</span>]])</span><br></pre></td></tr></table></figure><h2 id="3、ndarray-数组属性"><a href="#3、ndarray-数组属性" class="headerlink" title="3、ndarray 数组属性"></a>3、ndarray 数组属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]],[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]],[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]])</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[[1 2 3]</span></span><br><span class="line"><span class="string">  [1 2 3]</span></span><br><span class="line"><span class="string">  [1 2 3]]</span></span><br><span class="line"><span class="string"> [[1 2 3]</span></span><br><span class="line"><span class="string">  [1 2 3]</span></span><br><span class="line"><span class="string">  [1 2 3]]</span></span><br><span class="line"><span class="string"> [[1 2 3]</span></span><br><span class="line"><span class="string">  [1 2 3]</span></span><br><span class="line"><span class="string">  [1 2 3]]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>ndarray 多维数组支持下面这些属性：</p><h3 id="3-1-ndarray-T"><a href="#3-1-ndarray-T" class="headerlink" title="3.1 ndarray.T"></a>3.1 ndarray.T</h3><p>ndarray.T用于数组的转置，与 .transpose() 相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a.T</span><br></pre></td></tr></table></figure><h3 id="3-2-ndarray-dtype"><a href="#3-2-ndarray-dtype" class="headerlink" title="3.2 ndarray.dtype"></a>3.2 ndarray.dtype</h3><p>ndarray.dtype 用来输出数组包含元素的数据类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a.dtype</span><br></pre></td></tr></table></figure><h3 id="3-3-ndarray-imag"><a href="#3-3-ndarray-imag" class="headerlink" title="3.3 ndarray.imag"></a>3.3 ndarray.imag</h3><p>ndarray.imag 用来输出数组包含元素的虚部。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]],[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]],[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]])</span><br><span class="line"></span><br><span class="line">print(a.imag)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[[0 0 0]</span></span><br><span class="line"><span class="string">  [0 0 0]</span></span><br><span class="line"><span class="string">  [0 0 0]]</span></span><br><span class="line"><span class="string"> [[0 0 0]</span></span><br><span class="line"><span class="string">  [0 0 0]</span></span><br><span class="line"><span class="string">  [0 0 0]]</span></span><br><span class="line"><span class="string"> [[0 0 0]</span></span><br><span class="line"><span class="string">  [0 0 0]</span></span><br><span class="line"><span class="string">  [0 0 0]]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="3-4ndarray-real"><a href="#3-4ndarray-real" class="headerlink" title="3.4ndarray.real"></a>3.4ndarray.real</h3><p>ndarray.real用来输出数组包含元素的实部。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a.real</span><br></pre></td></tr></table></figure><h3 id="3-5-ndarray-size"><a href="#3-5-ndarray-size" class="headerlink" title="3.5 ndarray.size"></a>3.5 ndarray.size</h3><p>ndarray.size用来输出数组中的总包含元素数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a.size</span><br></pre></td></tr></table></figure><h3 id="3-6ndarray-itemsize"><a href="#3-6ndarray-itemsize" class="headerlink" title="3.6ndarray.itemsize"></a>3.6ndarray.itemsize</h3><p>ndarray.itemsize输出一个数组元素的字节数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a.itemsize <span class="comment"># 8</span></span><br></pre></td></tr></table></figure><h3 id="3-7-ndarray-nbytes"><a href="#3-7-ndarray-nbytes" class="headerlink" title="3.7 ndarray.nbytes"></a>3.7 ndarray.nbytes</h3><p>ndarray.nbytes用来输出数组的元素总字节数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a.nbytes <span class="comment"># 216=8*3*3*3</span></span><br></pre></td></tr></table></figure><h3 id="3-8-ndarray-ndim"><a href="#3-8-ndarray-ndim" class="headerlink" title="3.8 ndarray.ndim"></a>3.8 ndarray.ndim</h3><p>ndarray.ndim用来输出数组尺寸。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a.ndim <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h3 id="3-9-ndarray-shape"><a href="#3-9-ndarray-shape" class="headerlink" title="3.9 ndarray.shape"></a>3.9 ndarray.shape</h3><p>ndarray.shape用来输出数组维数组.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a.shape <span class="comment"># （3,3,3）</span></span><br></pre></td></tr></table></figure><h3 id="3-10-ndarray-strides"><a href="#3-10-ndarray-strides" class="headerlink" title="3.10 ndarray.strides"></a>3.10 ndarray.strides</h3><p>ndarray.strides用来遍历数组时，输出每个维度中步进的字节数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a.strides <span class="comment"># （72,24,8）</span></span><br></pre></td></tr></table></figure><h2 id="4、Numpy-数组的基本操作"><a href="#4、Numpy-数组的基本操作" class="headerlink" title="4、Numpy 数组的基本操作"></a>4、Numpy 数组的基本操作</h2><h3 id="4-1-重设形状"><a href="#4-1-重设形状" class="headerlink" title="4.1 重设形状"></a>4.1 重设形状</h3><p>reshape 可以在不改变数组数据的同时，改变数组的形状。其中，numpy.reshape() 等效于 ndarray.reshape()。reshape方法非常简单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.reshape(a, newshape)</span><br></pre></td></tr></table></figure><p>其中，a 表示原数组，newshape 用于指定新的形状(整数或者元组)。</p><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">print(np.arange(<span class="number">10</span>).reshape((<span class="number">5</span>, <span class="number">2</span>)))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[0 1]</span></span><br><span class="line"><span class="string"> [2 3]</span></span><br><span class="line"><span class="string"> [4 5]</span></span><br><span class="line"><span class="string"> [6 7]</span></span><br><span class="line"><span class="string"> [8 9]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="4-2-数组展开"><a href="#4-2-数组展开" class="headerlink" title="4.2 数组展开"></a>4.2 数组展开</h3><p>ravel 的目的是将任意形状的数组扁平化，变为 1 维数组。ravel 方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.ravel(a, order=<span class="string">'C'</span>)</span><br></pre></td></tr></table></figure><p>其中，a 表示需要处理的数组。order 表示变换时的读取顺序，默认是按照行依次读取，当 order=’F’ 时，可以按列依次读取排序。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>).reshape((<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[0 1 2 3 4]</span></span><br><span class="line"><span class="string"> [5 6 7 8 9]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(np.ravel(a)) <span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line">print(np.ravel(a, order=<span class="string">'F'</span>)) <span class="comment"># [0 5 1 6 2 7 3 8 4 9]</span></span><br><span class="line"></span><br><span class="line">print(a.flatten()) <span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br></pre></td></tr></table></figure><h3 id="4-3-轴移动"><a href="#4-3-轴移动" class="headerlink" title="4.3 轴移动"></a>4.3 轴移动</h3><p>moveaxis 可以将数组的轴移动到新的位置。其方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.moveaxis(a, source, destination)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>a：数组。</li><li>source：要移动的轴的原始位置。</li><li>destination：要移动的轴的目标位置。</li></ul><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.ones((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment"># (1,2,3)</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[[ 1.  1.  1.]</span></span><br><span class="line"><span class="string">  [ 1.  1.  1.]]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">b=np.moveaxis(a, <span class="number">0</span>, <span class="number">-1</span>) <span class="comment"># 等价于 a.transpose((1,2,0))</span></span><br><span class="line">print(b)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[[ 1.]</span></span><br><span class="line"><span class="string">  [ 1.]</span></span><br><span class="line"><span class="string">  [ 1.]]</span></span><br><span class="line"><span class="string"> [[ 1.]</span></span><br><span class="line"><span class="string">  [ 1.]</span></span><br><span class="line"><span class="string">  [ 1.]]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(b.shape) <span class="comment"># (2, 3, 1)</span></span><br><span class="line"></span><br><span class="line">c=a.transpose((<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>))</span><br><span class="line">print(c)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[[ 1.]</span></span><br><span class="line"><span class="string">  [ 1.]</span></span><br><span class="line"><span class="string">  [ 1.]]</span></span><br><span class="line"><span class="string"> [[ 1.]</span></span><br><span class="line"><span class="string">  [ 1.]</span></span><br><span class="line"><span class="string">  [ 1.]]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="4-4-轴交换"><a href="#4-4-轴交换" class="headerlink" title="4.4 轴交换"></a>4.4 轴交换</h3><p>和 moveaxis 不同的是，swapaxes 可以用来交换数组的轴。其方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.swapaxes(a, axis1, axis2)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>a：数组。</li><li>axis1：需要交换的轴 1 位置。</li><li>axis2：需要与轴 1 交换位置的轴 1 位置。</li></ul><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.ones((<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>)) <span class="comment"># (1,4,3)</span></span><br><span class="line">print(a)</span><br><span class="line">b=np.swapaxes(a, <span class="number">0</span>, <span class="number">2</span>) <span class="comment"># (3,4,1) 等价于 np.transpose(a,(2,1,0)) 和 np.moveaxis(np.moveaxis(a,0,-1),0,1)</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><h3 id="4-5-数组转置"><a href="#4-5-数组转置" class="headerlink" title="4.5 数组转置"></a>4.5 数组转置</h3><p>transpose 类似于矩阵的转置，它可以将 2 维数组的横轴和纵轴交换。其方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.transpose(a, axes=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>a：数组。</li><li>axis：该值默认为 none，表示转置。如果有值，那么则按照值替换轴。</li></ul><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[0 1]</span></span><br><span class="line"><span class="string"> [2 3]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(np.transpose(a)) <span class="comment"># 等价于np.transpose(a,(1,0))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[0 2]</span></span><br><span class="line"><span class="string"> [1 3]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">print(a[:,<span class="number">0</span>,:],a[:,<span class="number">1</span>,:])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[0 1]</span></span><br><span class="line"><span class="string"> [4 5]] [[2 3]</span></span><br><span class="line"><span class="string"> [6 7]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">c = np.transpose(a,(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line">print(c[<span class="number">0</span>,:,:],c[<span class="number">1</span>,:,:])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[0 1]</span></span><br><span class="line"><span class="string"> [4 5]] [[2 3]</span></span><br><span class="line"><span class="string"> [6 7]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="4-6-维度改变"><a href="#4-6-维度改变" class="headerlink" title="4.6 维度改变"></a>4.6 维度改变</h3><p>atleast_xd 支持将输入数据直接视为 x维。这里的 x 可以表示：1，2，3。方法分别维：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numpy.atleast_1d()</span><br><span class="line">numpy.atleast_2d()</span><br><span class="line">numpy.atleast_3d()</span><br></pre></td></tr></table></figure><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">print(np.atleast_1d(a)) <span class="comment"># [1 2 3 4]</span></span><br><span class="line">print(np.atleast_2d(a)) <span class="comment"># [[1 2 3 4]]</span></span><br><span class="line">print(np.atleast_3d(a))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[[1]</span></span><br><span class="line"><span class="string">  [2]</span></span><br><span class="line"><span class="string">  [3]</span></span><br><span class="line"><span class="string">  [4]]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="4-7-类型转变"><a href="#4-7-类型转变" class="headerlink" title="4.7 类型转变"></a>4.7 类型转变</h3><p>在 numpy 中，还有一系列以 as 开头的方法，它们可以将特定输入转换为数组，亦可将数组转换为矩阵、标量，ndarray等。如下：</p><ol><li>asarray(a，dtype，order)：将特定输入转换为数组。</li><li>asanyarray(a，dtype，order)：将特定输入转换为 ndarray。</li><li>asmatrix(data，dtype)：将特定输入转换为矩阵。</li><li>asfarray(a，dtype)：将特定输入转换为 float 类型的数组。</li><li>asarray_chkfinite(a，dtype，order)：将特定输入转换为数组，检查 NaN 或 infs。</li><li>asscalar(a)：将大小为 1 的数组转换为标量。</li></ol><p>这里以 asmatrix(data，dtype) 方法举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">np.asmatrix(a)</span><br></pre></td></tr></table></figure><h3 id="4-8-数组连接"><a href="#4-8-数组连接" class="headerlink" title="4.8 数组连接"></a>4.8 数组连接</h3><p>concatenate 可以将多个数组沿指定轴连接在一起。其方法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.concatenate((a1, a2, ...), axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>(a1, a2, …)：需要连接的数组。</li><li>axis：指定连接轴。</li></ul><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]) <span class="comment"># (3,2)</span></span><br><span class="line">b = np.array([[<span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>]]) <span class="comment"># (2,2)</span></span><br><span class="line">c = np.array([[<span class="number">11</span>, <span class="number">12</span>]]) <span class="comment"># (1,2)</span></span><br><span class="line"></span><br><span class="line">d=np.concatenate((a, b, c), axis=<span class="number">0</span>) <span class="comment"># axis=0 按第1维 连接</span></span><br><span class="line">print(d.shape) <span class="comment"># (6, 2)</span></span><br></pre></td></tr></table></figure><p>这里，我们可以尝试沿着横轴连接。但要保证连接处的维数一致，所以这里用到了 .T 转置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]) <span class="comment"># (3,2)</span></span><br><span class="line">b = np.array([[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]) <span class="comment"># (1,3)</span></span><br><span class="line"></span><br><span class="line">print(np.concatenate((a, b.T), axis=<span class="number">1</span>).shape) <span class="comment"># (3,3)</span></span><br></pre></td></tr></table></figure><h3 id="4-9-数组堆叠"><a href="#4-9-数组堆叠" class="headerlink" title="4.9 数组堆叠"></a>4.9 数组堆叠</h3><p>在 numpy 中，还有一系列以 as 开头的方法，它们可以将特定输入转换为数组，亦可将数组转换为矩阵、标量，ndarray等。如下：</p><ol><li>stack(arrays，axis)：沿着新轴连接数组的序列。</li><li>column_stack()：将 1 维数组作为列堆叠到 2 维数组中。</li><li>hstack()：按水平方向堆叠数组。</li><li>vstack()：按垂直方向堆叠数组。</li><li>dstack()：按深度方向堆叠数组。</li></ol><p>这里以 stack(arrays，axis) 方法举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">b = np.array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">print(np.stack((a, b),axis=<span class="number">0</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(np.column_stack((a,b)))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[1 4]</span></span><br><span class="line"><span class="string"> [2 5]</span></span><br><span class="line"><span class="string"> [3 6]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(np.hstack((a,b))) <span class="comment"># [1 2 3 4 5 6]</span></span><br><span class="line">print(np.vstack((a,b)))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(np.dstack((a,b)))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[[1 4]</span></span><br><span class="line"><span class="string">  [2 5]</span></span><br><span class="line"><span class="string">  [3 6]]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>tile 与 repeat</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="comment"># repeat each element 3 times</span></span><br><span class="line">repeat(a, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">=&gt; array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4])</span><br><span class="line"></span><br><span class="line"><span class="comment"># tile the matrix 3 times</span></span><br><span class="line">tile(a, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">=&gt; array([[1, 2, 1, 2, 1, 2],</span><br><span class="line">          [<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure><h3 id="4-10-拆分"><a href="#4-10-拆分" class="headerlink" title="4.10 拆分"></a>4.10 拆分</h3><p>split 及与之相似的一系列方法主要是用于数组的拆分，列举如下：</p><ol><li>split(ary，indices_or_sections，axis)：将数组拆分为多个子数组。</li><li>dsplit(ary，indices_or_sections)：按深度方向将数组拆分成多个子数组。</li><li>hsplit(ary，indices_or_sections)：按水平方向将数组拆分成多个子数组。</li><li>vsplit(ary，indices_or_sections)：按垂直方向将数组拆分成多个子数组。</li></ol><p>下面，我们看一看 split 到底有什么效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[0 1 2]</span></span><br><span class="line"><span class="string"> [3 4 5]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(np.split(a, <span class="number">3</span>,axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[array([[0],</span></span><br><span class="line"><span class="string">       [3]]), array([[1],</span></span><br><span class="line"><span class="string">       [4]]), array([[2],</span></span><br><span class="line"><span class="string">       [5]])]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(np.split(a, <span class="number">2</span>,axis=<span class="number">0</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[array([[0, 1, 2]]), array([[3, 4, 5]])]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(np.hsplit(a,<span class="number">3</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[array([[0],</span></span><br><span class="line"><span class="string">       [3]]), array([[1],</span></span><br><span class="line"><span class="string">       [4]]), array([[2],</span></span><br><span class="line"><span class="string">       [5]])]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(np.vsplit(a,<span class="number">2</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[array([[0, 1, 2]]), array([[3, 4, 5]])]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>numpy 中还有针对数组元素添加或移除的一些方法。</p><h3 id="4-11-删除"><a href="#4-11-删除" class="headerlink" title="4.11 删除"></a>4.11 删除</h3><p>delete(arr，obj，axis)：沿特定轴删除数组中的子数组。<br>下面，依次对 4 种方法进行示例，首先是 delete 删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 0  1  2  3]</span></span><br><span class="line"><span class="string"> [ 4  5  6  7]</span></span><br><span class="line"><span class="string"> [ 8  9 10 11]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(np.delete(a, <span class="number">2</span>, <span class="number">1</span>)) <span class="comment"># 将第 3 列(索引 2)删除</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 0  1  3]</span></span><br><span class="line"><span class="string"> [ 4  5  7]</span></span><br><span class="line"><span class="string"> [ 8  9 11]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(np.delete(a, <span class="number">2</span>, <span class="number">0</span>)) <span class="comment"># 将第 3 行(索引 2)删除</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[0 1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6 7]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="4-12-数组插入"><a href="#4-12-数组插入" class="headerlink" title="4.12 数组插入"></a>4.12 数组插入</h3><p>insert(arr，obj，values，axis)：依据索引在特定轴之前插入值。<br>再看一看 insert插入, 用法和 delete 很相似，只是需要在第三个参数位置设置需要插入的数组对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">b = np.arange(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">print(np.insert(a, <span class="number">2</span>, b, <span class="number">0</span>)) <span class="comment"># axis=0 按行插入 obj=2 a的第3行，即将b插入到a的第3行位置</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 0  1  2  3]</span></span><br><span class="line"><span class="string"> [ 4  5  6  7]</span></span><br><span class="line"><span class="string"> [ 0  1  2  3]</span></span><br><span class="line"><span class="string"> [ 8  9 10 11]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="4-13-附加"><a href="#4-13-附加" class="headerlink" title="4.13 附加"></a>4.13 附加</h3><p>append(arr，values，axis)：将值附加到数组的末尾，并返回 1 维数组。<br>append 的用法也非常简单。只需要设置好需要附加的值和轴位置就好了。它其实相当于只能在末尾插入的 insert，所以少了一个指定索引的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">b = np.arange(<span class="number">3</span>).reshape(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(np.append(a, b)) <span class="comment"># [0 1 2 3 4 5 0 1 2]</span></span><br><span class="line"></span><br><span class="line">print(np.append(a, b,axis=<span class="number">0</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[0 1 2]</span></span><br><span class="line"><span class="string"> [3 4 5]</span></span><br><span class="line"><span class="string"> [0 1 2]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="4-14-重设尺寸"><a href="#4-14-重设尺寸" class="headerlink" title="4.14 重设尺寸"></a>4.14 重设尺寸</h3><p>resize(a，new_shape)：对数组尺寸进行重新设定。<br>resize 就很好理解了，直接举例子吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">print(a.reshape((<span class="number">2</span>,<span class="number">5</span>)))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[0 1 2 3 4]</span></span><br><span class="line"><span class="string"> [5 6 7 8 9]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">a.resize((<span class="number">2</span>,<span class="number">5</span>))</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[0 1 2 3 4]</span></span><br><span class="line"><span class="string"> [5 6 7 8 9]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>你可能会纳闷了，这个 resize 看起来和上面的 reshape 一样呢，都是改变数组原有的形状。</p><p>其实，它们直接是有区别的，区别在于对原数组的影响。reshape 在改变形状时，不会影响原数组，相当于对原数组做了一份拷贝。而 resize 则是对原数组执行操作。</p><h3 id="4-15-翻转数组"><a href="#4-15-翻转数组" class="headerlink" title="4.15 翻转数组"></a>4.15 翻转数组</h3><p>在 numpy 中，我们还可以对数组进行翻转操作：</p><ol><li>fliplr(m)：左右翻转数组。</li><li>flipud(m)：上下翻转数组。</li></ol><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[0 1 2]</span></span><br><span class="line"><span class="string"> [3 4 5]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(np.fliplr(a))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[2 1 0]</span></span><br><span class="line"><span class="string"> [5 4 3]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(np.flipud(a))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[3 4 5]</span></span><br><span class="line"><span class="string"> [0 1 2]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="4-16-增加一个新维度-newaxis"><a href="#4-16-增加一个新维度-newaxis" class="headerlink" title="4.16 增加一个新维度: newaxis"></a>4.16 增加一个新维度: newaxis</h3><p>newaxis 可以帮助我们为数组增加一个新维度，比如说，将一个向量转换成列矩阵和行矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">v = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">shape(v)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; (3,)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># make a column matrix of the vector v</span></span><br><span class="line">v[:, newaxis]</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([[1],</span></span><br><span class="line"><span class="string">          [2],</span></span><br><span class="line"><span class="string">          [3]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># column matrix</span></span><br><span class="line">v[:,newaxis].shape</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; (3, 1)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># row matrix</span></span><br><span class="line">v[newaxis,:].shape</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; (1, 3)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="5、Numpy-随机抽样"><a href="#5、Numpy-随机抽样" class="headerlink" title="5、Numpy 随机抽样"></a>5、Numpy 随机抽样</h2><p>Numpy 的随机抽样功能非常强大，主要由 numpy.random 模块完成。</p><p>首先，我们需要了解如何使用 numpy 也就是生成一些满足基本需求的随机数据。主要由以下一些方法完成：</p><h3 id="5-1-numpy-random-rand"><a href="#5-1-numpy-random-rand" class="headerlink" title="5.1 numpy.random.rand"></a>5.1 numpy.random.rand</h3><p>numpy.random.rand(d0, d1, …, dn) 方法的作用为：指定一个数组，并使用[0, 1) 区间随机数据填充，这些数据均匀分布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.random.rand(<span class="number">2</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="5-2-numpy-random-randn"><a href="#5-2-numpy-random-randn" class="headerlink" title="5.2 numpy.random.randn"></a>5.2 numpy.random.randn</h3><p>numpy.random.randn(d0, d1, …, dn) 与 numpy.random.rand(d0, d1, …, dn) 的区别在于，返回的随机数据符合标准正太分布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.random.randn(<span class="number">1</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="5-3-numpy-random-randint"><a href="#5-3-numpy-random-randint" class="headerlink" title="5.3 numpy.random.randint"></a>5.3 numpy.random.randint</h3><p>randint(low, high, size, dtype) 方法将会生成 [low, high) 的随机整数。注意这是一个半开半闭区间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.random.randint(<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>)) <span class="comment"># [4 4 3 3 3 2 2 4 4 2]</span></span><br></pre></td></tr></table></figure><h3 id="5-4-numpy-random-random-integers"><a href="#5-4-numpy-random-random-integers" class="headerlink" title="5.4 numpy.random.random_integers"></a>5.4 numpy.random.random_integers</h3><p>random_integers(low, high, size) 方法将会生成 [low, high] 的 np.int 类型随机整数。注</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">print(np.random.random_integers(<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>)) <span class="comment"># [3 2 5 2 3 2 3 3 2 5]</span></span><br></pre></td></tr></table></figure><h3 id="5-5-numpy-random-random-sample"><a href="#5-5-numpy-random-random-sample" class="headerlink" title="5.5 numpy.random.random_sample"></a>5.5 numpy.random.random_sample</h3><p>random_sample(size) 方法将会在 [0, 1) 区间内生成指定 size 的随机浮点数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p>np.random.random_sample([10])<br>与 numpy.random.random_sample 类似的方法还有：</p><ul><li>numpy.random.random([size])</li><li>numpy.random.ranf([size])</li><li>numpy.random.sample([size])</li></ul><p>它们 4 个的效果都差不多。</p><h3 id="5-6-numpy-random-choice"><a href="#5-6-numpy-random-choice" class="headerlink" title="5.6 numpy.random.choice"></a>5.6 numpy.random.choice</h3><p>choice(a, size, replace, p) 方法将会给定的 1 维数组里生成随机数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.random.choice(<span class="number">10</span>,<span class="number">5</span>) <span class="comment"># 将会在 np.arange(10) 中生成 5 个随机数</span></span><br></pre></td></tr></table></figure><h3 id="5-7-概率密度分布"><a href="#5-7-概率密度分布" class="headerlink" title="5.7 概率密度分布"></a>5.7 概率密度分布</h3><p>除了上面介绍的 6 中随机数生成方法，numpy 还提供了大量的满足特定概率密度分布的样本生成方法。它们的使用方法和上面非常相似，这里就不再一一介绍了。列举如下：</p><ol><li>numpy.random.beta(a，b，size)：从 Beta 分布中生成随机数。</li><li>numpy.random.binomial(n, p, size)：从二项分布中生成随机数。</li><li>numpy.random.chisquare(df，size)：从卡方分布中生成随机数。</li><li>numpy.random.dirichlet(alpha，size)：从 Dirichlet 分布中生成随机数。</li><li>numpy.random.exponential(scale，size)：从指数分布中生成随机数。</li><li>numpy.random.f(dfnum，dfden，size)：从 F 分布中生成随机数。</li><li>numpy.random.gamma(shape，scale，size)：从 Gamma 分布中生成随机数。</li><li>numpy.random.geometric(p，size)：从几何分布中生成随机数。</li><li>numpy.random.gumbel(loc，scale，size)：从 Gumbel 分布中生成随机数。</li><li>numpy.random.hypergeometric(ngood, nbad, nsample, size)：从超几何分布中生成随机数。</li><li>numpy.random.laplace(loc，scale，size)：从拉普拉斯双指数分布中生成随机数。</li><li>numpy.random.logistic(loc，scale，size)：从逻辑分布中生成随机数。</li><li>numpy.random.lognormal(mean，sigma，size)：从对数正态分布中生成随机数。</li><li>numpy.random.logseries(p，size)：从对数系列分布中生成随机数。</li><li>numpy.random.multinomial(n，pvals，size)：从多项分布中生成随机数。</li><li>numpy.random.multivariate_normal(mean, cov, size)：从多变量正态分布绘制随机样本。</li><li>numpy.random.negative_binomial(n, p, size)：从负二项分布中生成随机数。</li><li>numpy.random.noncentral_chisquare(df，nonc，size)：从非中心卡方分布中生成随机数。</li><li>numpy.random.noncentral_f(dfnum, dfden, nonc, size)：从非中心 F 分布中抽取样本。</li><li>numpy.random.normal(loc，scale，size)：从正态分布绘制随机样本。</li><li>numpy.random.pareto(a，size)：从具有指定形状的 Pareto II 或 Lomax 分布中生成随机数。</li><li>numpy.random.poisson(lam，size)：从泊松分布中生成随机数。</li><li>numpy.random.power(a，size)：从具有正指数 a-1 的功率分布中在 0，1 中生成随机数。</li><li>numpy.random.rayleigh(scale，size)：从瑞利分布中生成随机数。</li><li>numpy.random.standard_cauchy(size)：从标准 Cauchy 分布中生成随机数。</li><li>numpy.random.standard_exponential(size)：从标准指数分布中生成随机数。</li><li>numpy.random.standard_gamma(shape，size)：从标准 Gamma 分布中生成随机数。</li><li>numpy.random.standard_normal(size)：从标准正态分布中生成随机数。</li><li>numpy.random.standard_t(df，size)：从具有 df 自由度的标准学生 t 分布中生成随机数。</li><li>numpy.random.triangular(left，mode，right，size)：从三角分布中生成随机数。</li><li>numpy.random.uniform(low，high，size)：从均匀分布中生成随机数。</li><li>numpy.random.vonmises(mu，kappa，size)：从 von Mises 分布中生成随机数。</li><li>numpy.random.wald(mean，scale，size)：从 Wald 或反高斯分布中生成随机数。</li><li>numpy.random.weibull(a，size)：从威布尔分布中生成随机数。</li><li>numpy.random.zipf(a，size)：从 Zipf 分布中生成随机数。</li></ol><h2 id="6、数学函数"><a href="#6、数学函数" class="headerlink" title="6、数学函数"></a>6、数学函数</h2><h3 id="6-1-三角函数"><a href="#6-1-三角函数" class="headerlink" title="6.1 三角函数"></a>6.1 三角函数</h3><p>首先, 看一看 numpy 提供的三角函数功能。这些方法有：</p><ol><li>numpy.sin(x)：三角正弦。</li><li>numpy.cos(x)：三角余弦。</li><li>numpy.tan(x)：三角正切。</li><li>numpy.arcsin(x)：三角反正弦。</li><li>numpy.arccos(x)：三角反余弦。</li><li>numpy.arctan(x)：三角反正切。</li><li>numpy.hypot(x1,x2)：直角三角形求斜边。</li><li>numpy.degrees(x)：弧度转换为度。</li><li>numpy.radians(x)：度转换为弧度。</li><li>numpy.deg2rad(x)：度转换为弧度。</li><li>numpy.rad2deg(x)：弧度转换为度。</li></ol><p>比如，我们可以用上面提到的 numpy.rad2deg(x) 将弧度转换为度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.rad2deg(np.pi)) <span class="comment"># 180.0</span></span><br></pre></td></tr></table></figure><h3 id="6-2-双曲函数"><a href="#6-2-双曲函数" class="headerlink" title="6.2 双曲函数"></a>6.2 双曲函数</h3><p>在数学中，双曲函数是一类与常见的三角函数类似的函数。双曲函数经常出现于某些重要的线性微分方程的解中，使用 numpy 计算它们的方法为：</p><ol><li>numpy.sinh(x)：双曲正弦。</li><li>numpy.cosh(x)：双曲余弦。</li><li>numpy.tanh(x)：双曲正切。</li><li>numpy.arcsinh(x)：反双曲正弦。</li><li>numpy.arccosh(x)：反双曲余弦。</li><li>numpy.arctanh(x)：反双曲正切。</li></ol><h3 id="6-3-数值修约"><a href="#6-3-数值修约" class="headerlink" title="6.3 数值修约"></a>6.3 数值修约</h3><p>数值修约, 又称数字修约, 是指在进行具体的数字运算前, 按照一定的规则确定一致的位数, 然后舍去某些数字后面多余的尾数的过程[via. 维基百科]。比如, 我们常听到的「4 舍 5 入」就属于数值修约中的一种。</p><ol><li>numpy.around(a)：平均到给定的小数位数。</li><li>numpy.round_(a)：将数组舍入到给定的小数位数。</li><li>numpy.rint(x)：修约到最接近的整数。</li><li>numpy.fix(x, y)：向 0 舍入到最接近的整数。</li><li>numpy.floor(x)：返回输入的底部(标量 x 的底部是最大的整数 i)。</li><li>numpy.ceil(x)：返回输入的上限(标量 x 的底部是最小的整数 i).</li><li>numpy.trunc(x)：返回输入的截断值。</li></ol><p>随机选择几个浮点数，看一看上面方法的区别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([<span class="number">1.21</span>, <span class="number">2.53</span>, <span class="number">3.86</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([ <span class="number">1.21</span>,  <span class="number">2.53</span>,  <span class="number">3.86</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.around(a)</span><br><span class="line">array([ <span class="number">1.</span>,  <span class="number">3.</span>,  <span class="number">4.</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.round_(a)</span><br><span class="line">array([ <span class="number">1.</span>,  <span class="number">3.</span>,  <span class="number">4.</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.rint(a)</span><br><span class="line">array([ <span class="number">1.</span>,  <span class="number">3.</span>,  <span class="number">4.</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.fix(a)</span><br><span class="line">array([ <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.floor(a)</span><br><span class="line">array([ <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.ceil(a)</span><br><span class="line">array([ <span class="number">2.</span>,  <span class="number">3.</span>,  <span class="number">4.</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.trunc(a)</span><br><span class="line">array([ <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>])</span><br></pre></td></tr></table></figure><h3 id="6-4-求和、求积、差分"><a href="#6-4-求和、求积、差分" class="headerlink" title="6.4 求和、求积、差分"></a>6.4 求和、求积、差分</h3><p>下面这些方法用于数组内元素或数组间进行求和、求积以及进行差分。</p><ol><li>numpy.prod(a, axis, dtype, keepdims)：返回指定轴上的数组元素的乘积。</li><li>numpy.sum(a, axis, dtype, keepdims)：返回指定轴上的数组元素的总和。</li><li>numpy.nanprod(a, axis, dtype, keepdims)：返回指定轴上的数组元素的乘积, 将 NaN 视作 1。</li><li>numpy.nansum(a, axis, dtype, keepdims)：返回指定轴上的数组元素的总和, 将 NaN 视作 0。</li><li>numpy.cumprod(a, axis, dtype)：返回沿给定轴的元素的累积乘积。</li><li>numpy.cumsum(a, axis, dtype)：返回沿给定轴的元素的累积总和。</li><li>numpy.nancumprod(a, axis, dtype)：返回沿给定轴的元素的累积乘积, 将 NaN 视作 1。</li><li>numpy.nancumsum(a, axis, dtype)：返回沿给定轴的元素的累积总和, 将 NaN 视作 0。</li><li>numpy.diff(a, n, axis)：计算沿指定轴的第 n 个离散差分。</li><li>numpy.ediff1d(ary, to_end, to_begin)：数组的连续元素之间的差异。</li><li>numpy.gradient(f)：返回 N 维数组的梯度。</li><li>numpy.cross(a, b, axisa, axisb, axisc, axis)：返回两个(数组）向量的叉积。</li><li>numpy.trapz(y, x, dx, axis)：使用复合梯形规则沿给定轴积分。</li><li>numpy.trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None):  # 等价于 diag（a）.sum()</li></ol><p>下面，我们选取几个举例测试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.arange(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.prod(a) <span class="comment"># 所有元素乘积</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.sum(a) <span class="comment"># 所有元素和</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.nanprod(a) <span class="comment"># 默认轴上所有元素乘积</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.nansum(a) <span class="comment"># 默认轴上所有元素和</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.cumprod(a) <span class="comment"># 默认轴上元素的累积乘积。</span></span><br><span class="line">array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.diff(a) <span class="comment"># 默认轴上元素差分。</span></span><br><span class="line">array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="6-5-指数和对数"><a href="#6-5-指数和对数" class="headerlink" title="6.5 指数和对数"></a>6.5 指数和对数</h3><p>如果你需要进行指数或者对数求解，可以用到以下这些方法。</p><ol><li>numpy.exp(x)：计算输入数组中所有元素的指数。</li><li>numpy.expm1(x)：对数组中的所有元素计算 exp(x） - 1.</li><li>numpy.exp2(x)：对于输入数组中的所有 p, 计算 2 ** p。</li><li>numpy.log(x)：计算自然对数。</li><li>numpy.log10(x)：计算常用对数。</li><li>numpy.log2(x)：计算二进制对数。</li><li>numpy.log1p(x)：log(1 + x)。</li><li>numpy.logaddexp(x1, x2)：log2(2<strong>x1 + 2</strong>x2)。</li><li>numpy.logaddexp2(x1, x2)：log(exp(x1) + exp(x2))。</li></ol><h3 id="6-6-算术运算"><a href="#6-6-算术运算" class="headerlink" title="6.6 算术运算"></a>6.6 算术运算</h3><p>当然，numpy 也提供了一些用于算术运算的方法，使用起来会比 python 提供的运算符灵活一些，主要是可以直接针对数组。</p><ol><li>numpy.add(x1, x2)：对应元素相加。</li><li>numpy.reciprocal(x)：求倒数 1/x。</li><li>numpy.negative(x)：求对应负数。</li><li>numpy.multiply(x1, x2)：求解乘法。</li><li>numpy.divide(x1, x2)：相除 x1/x2。</li><li>numpy.power(x1, x2)：类似于 x1^x2。</li><li>numpy.subtract(x1, x2)：减法。</li><li>numpy.fmod(x1, x2)：返回除法的元素余项。</li><li>numpy.mod(x1, x2)：返回余项。</li><li>numpy.modf(x1)：返回数组的小数和整数部分。</li><li>numpy.remainder(x1, x2)：返回除法余数。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a2 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1</span><br><span class="line">array([<span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a2</span><br><span class="line">array([<span class="number">1</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.add(a1, a2)</span><br><span class="line">array([ <span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>,  <span class="number">4</span>,  <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.reciprocal(a1)</span><br><span class="line">array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, , ])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.negative(a1)</span><br><span class="line">array([<span class="number">-3</span>, <span class="number">-7</span>, <span class="number">-8</span>,  <span class="number">0</span>,  <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.multiply(a1, a2)</span><br><span class="line">array([ <span class="number">3</span>, <span class="number">56</span>, <span class="number">48</span>,  <span class="number">0</span>,  <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.divide(a1, a2)</span><br><span class="line">array([<span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.power(a1, a2)</span><br><span class="line">array([<span class="number">3</span>,<span class="number">5764801</span>,<span class="number">262144</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.subtract(a1, a2)</span><br><span class="line">array([ <span class="number">2</span>, <span class="number">-1</span>,  <span class="number">2</span>, <span class="number">-4</span>, <span class="number">-4</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.fmod(a1, a2)</span><br><span class="line">array([<span class="number">0</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.mod(a1, a2)</span><br><span class="line">array([<span class="number">0</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.modf(a1)</span><br><span class="line">(array([ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>]), array([ <span class="number">3.</span>,  <span class="number">7.</span>,  <span class="number">8.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>]))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.remainder(a1, a2)</span><br><span class="line">array([<span class="number">0</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="6-7-矩阵和向量积"><a href="#6-7-矩阵和向量积" class="headerlink" title="6.7 矩阵和向量积"></a>6.7 矩阵和向量积</h3><p>求解向量、矩阵、张量的点积等同样是 numpy 非常强大的地方。</p><ol><li>numpy.dot(a,b)：求解两个数组的点积。</li><li>numpy.vdot(a,b)：求解两个向量的点积。</li><li>numpy.inner(a,b)：求解两个数组的内积。</li><li>numpy.outer(a,b)：求解两个向量的外积。</li><li>numpy.matmul(a,b)：求解两个数组的矩阵乘积。</li><li>numpy.tensordot(a,b)：求解张量点积。</li><li>numpy.kron(a,b)：计算 Kronecker 乘积。</li></ol><h3 id="6-8-其他"><a href="#6-8-其他" class="headerlink" title="6.8 其他"></a>6.8 其他</h3><p>除了上面这些归好类别的方法，numpy 中还有一些用于数学运算的方法，归纳如下：</p><ol><li>numpy.angle(z, deg)：返回复参数的角度。</li><li>numpy.real(val)：返回数组元素的实部。</li><li>numpy.imag(val)：返回数组元素的虚部。</li><li>numpy.conj(x)：按元素方式返回共轭复数。</li><li>numpy.convolve(a, v, mode)：返回线性卷积。</li><li>numpy.sqrt(x)：平方根。</li><li>numpy.cbrt(x)：立方根。</li><li>numpy.square(x)：平方。</li><li>numpy.absolute(x)：绝对值, 可求解复数。</li><li>numpy.fabs(x)：绝对值。</li><li>numpy.sign(x)：符号函数。</li><li>numpy.maximum(x1, x2)：最大值。</li><li>numpy.minimum(x1, x2)：最小值。</li><li>numpy.nan_to_num(x)：用 0 替换 NaN。</li><li>numpy.interp(x, xp, fp, left, right, period)：线性插值。</li><li>numpy.mean（） 平均值</li><li>numpy.std（） 标准差 numpy.var（） 方差</li><li>numpy.max（） 最大值numpy.min（） 最小值</li></ol><h2 id="7、代数运算"><a href="#7、代数运算" class="headerlink" title="7、代数运算"></a>7、代数运算</h2><p>上面，我们分为 8 个类别，介绍了 numpy 中常用到的数学函数。这些方法让复杂的计算过程表达更为简单。除此之外，numpy 中还包含一些代数运算的方法，尤其是涉及到矩阵的计算方法，求解特征值、特征向量、逆矩阵等，非常方便。</p><ol><li>numpy.linalg.cholesky(a)：Cholesky 分解。</li><li>numpy.linalg.qr(a ,mode)：计算矩阵的 QR 因式分解。</li><li>numpy.linalg.svd(a ,full_matrices,compute_uv)：奇异值分解。</li><li>numpy.linalg.eig(a)：计算正方形数组的特征值和右特征向量。</li><li>numpy.linalg.eigh(a, UPLO)：返回 Hermitian 或对称矩阵的特征值和特征向量。</li><li>numpy.linalg.eigvals(a)：计算矩阵的特征值。</li><li>numpy.linalg.eigvalsh(a, UPLO)：计算 Hermitian 或真实对称矩阵的特征值。</li><li>numpy.linalg.norm(x ,ord,axis,keepdims)：计算矩阵或向量范数。</li><li>numpy.linalg.cond(x ,p)：计算矩阵的条件数。</li><li>numpy.linalg.det(a)：计算数组的行列式。</li><li>numpy.linalg.matrix_rank(M ,tol)：使用奇异值分解方法返回秩。</li><li>numpy.linalg.slogdet(a)：计算数组的行列式的符号和自然对数。</li><li>numpy.trace(a ,offset,axis1,axis2,dtype,out)：沿数组的对角线返回总和。</li><li>numpy.linalg.solve(a,b)：求解线性矩阵方程或线性标量方程组。</li><li>numpy.linalg.tensorsolve(a,b ,axes)：为 x 解出张量方程a x = b</li><li>numpy.linalg.lstsq(a,b ,rcond)：将最小二乘解返回到线性矩阵方程。</li><li>numpy.linalg.inv(a)：计算逆矩阵。</li><li>numpy.linalg.pinv(a ,rcond)：计算矩阵的（Moore-Penrose）伪逆。</li><li>numpy.linalg.tensorinv(a ,ind)：计算N维数组的逆。</li></ol><h2 id="8、Numpy-数组索引和切片"><a href="#8、Numpy-数组索引和切片" class="headerlink" title="8、Numpy 数组索引和切片"></a>8、Numpy 数组索引和切片</h2><h3 id="8-1-数组索引"><a href="#8-1-数组索引" class="headerlink" title="8.1 数组索引"></a>8.1 数组索引</h3><p>我们可以通过索引值（从 0 开始）来访问 Ndarray 中的特定位置元素。Numpy 中的索引和 python 对 list 索引的方式非常相似，但又有所不同。我们一起来看一下：</p><p>首先是，一维数据索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取索引值为 1 的数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment"># 分别获取索引值为 1，2，3 的数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>对于二维数据而言：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>],</span><br><span class="line">       [ <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">       [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>],</span><br><span class="line">       [<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第 2 行，第 3 列的数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>如果，我们使用 python 中的 list 索引同样的值，看看有什么区别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个数据相同的 list</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>],[ <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>],[<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 按照上面的方法获取第 2 行，第 3 列的数据，报错。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: list indices must be integers <span class="keyword">or</span> slices, <span class="keyword">not</span> tuple</span><br><span class="line"> </span><br><span class="line"><span class="comment"># python 中 list 索引 2 维数据的方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>如何索引二维 Ndarray 中的多个元素值，这里使用逗号,分割：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>],</span><br><span class="line">       [ <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">       [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>],</span><br><span class="line">       [<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">array([ <span class="number">8</span>, <span class="number">14</span>])</span><br></pre></td></tr></table></figure><p>这里需要注意索引的对应关系。我们实际获取的是[1,3]，也就是第2行和第4列对于的值8。以及[2, 4]，也就是第3行和第5列对于的值14。</p><p>那么，三维数据呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">30</span>).reshape(<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],</span><br><span class="line">        [ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],</span><br><span class="line">        [ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],</span><br><span class="line">        [ <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>],</span><br><span class="line">        [<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>],</span><br><span class="line">        [<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>],</span><br><span class="line">        [<span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>],</span><br><span class="line">        [<span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>]]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">array([ <span class="number">4</span>, <span class="number">23</span>])</span><br></pre></td></tr></table></figure><p>这里，[0,1]分布代表 axis = 0 和 axis = 1。而，后面的[1,2],[1,2] 分别选择了第 2 行第2 列和第 3 行第3 列的两个数。</p><h3 id="8-2-数组切片"><a href="#8-2-数组切片" class="headerlink" title="8.2 数组切片"></a>8.2 数组切片</h3><p>Numpy 里面针对Ndarray的数组切片和 python 里的list 切片操作是一样的。其语法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ndarray[start:stop:step]</span><br></pre></td></tr></table></figure><p>start:stop:step 分布代表起始索引：截至索引：步长。对于一维数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">5</span>]</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">5</span>:<span class="number">10</span>]</span><br><span class="line">array([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>:<span class="number">10</span>:<span class="number">2</span>]</span><br><span class="line">array([<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>])</span><br></pre></td></tr></table></figure><p>对于多维数组，我们只需要用逗号,分割不同维度即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>],</span><br><span class="line">       [ <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">       [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>],</span><br><span class="line">       [<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先取第 3，4 列（第一个维度），再取第 1，2，3 行（第二个维度）。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>:<span class="number">3</span>,<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">array([[ <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">7</span>,  <span class="number">8</span>],</span><br><span class="line">       [<span class="number">12</span>, <span class="number">13</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按步长为 2 取所有列和所有行的数据。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:,::<span class="number">2</span>]</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">2</span>,  <span class="number">4</span>],</span><br><span class="line">       [ <span class="number">5</span>,  <span class="number">7</span>,  <span class="number">9</span>],</span><br><span class="line">       [<span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>],</span><br><span class="line">       [<span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>]])</span><br></pre></td></tr></table></figure><p>当超过 3 维或更多维时，用 2 维数据的切片方式类推即可。</p><h3 id="8-3-索引与切片区别"><a href="#8-3-索引与切片区别" class="headerlink" title="8.3 索引与切片区别"></a>8.3 索引与切片区别</h3><p>你可能有点疑问，上面的索引和切片怎么看起来这么相似呢？</p><p>它们的语法的确很相似，但实际上有区别：</p><p><strong>1. 修改切片中的内容会影响原始数组。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">0</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure><p>除此之外，切片只能通过步长控制得到连续的值，而索引可以得到任意值。也就是说，索引的自由度更大。</p><h3 id="8-4-高级索引（Fancy-indexing）"><a href="#8-4-高级索引（Fancy-indexing）" class="headerlink" title="8.4 高级索引（Fancy indexing）"></a>8.4 高级索引（Fancy indexing）</h3><p>指使用列表或者数组进行索引:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">A = array([[n+m*<span class="number">10</span> <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">5</span>)] <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">5</span>)])</span><br><span class="line">print(A)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 0  1  2  3  4]</span></span><br><span class="line"><span class="string"> [10 11 12 13 14]</span></span><br><span class="line"><span class="string"> [20 21 22 23 24]</span></span><br><span class="line"><span class="string"> [30 31 32 33 34]</span></span><br><span class="line"><span class="string"> [40 41 42 43 44]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">row_indices = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(A[row_indices])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([[10, 11, 12, 13, 14],</span></span><br><span class="line"><span class="string">          [20, 21, 22, 23, 24],</span></span><br><span class="line"><span class="string">          [30, 31, 32, 33, 34]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">col_indices = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">-1</span>] <span class="comment"># remember, index -1 means the last element</span></span><br><span class="line">print(A[row_indices, col_indices])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([11, 22, 34])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>我们也可以使用索引掩码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">B = array([n <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">5</span>)])</span><br><span class="line">print(B)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([0, 1, 2, 3, 4])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">row_mask = array([<span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">False</span>])</span><br><span class="line">print(B[row_mask])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([0, 2])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># same thing</span></span><br><span class="line">row_mask = array([<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>], dtype=bool)</span><br><span class="line">print(B[row_mask])</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([0, 2])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>使用比较操作符生成掩码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line">x = arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.5</span>)</span><br><span class="line">print(x)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([ 0. ,  0.5,  1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5,  5. ,</span></span><br><span class="line"><span class="string">           5.5,  6. ,  6.5,  7. ,  7.5,  8. ,  8.5,  9. ,  9.5])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">mask = (<span class="number">5</span> &lt; x) * (x &lt; <span class="number">7.5</span>)</span><br><span class="line">print(mask)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([False, False, False, False, False, False, False, False, False,</span></span><br><span class="line"><span class="string">          False, False,  True,  True,  True,  True, False, False, False,</span></span><br><span class="line"><span class="string">          False, False], dtype=bool)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(x[mask])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([ 5.5,  6. ,  6.5,  7. ])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">mask=(<span class="number">5</span> &lt; x) - (x &lt; <span class="number">7.5</span>)</span><br><span class="line">print(mask)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[ True  True  True  True  True  True  True  True  True  True  True False</span></span><br><span class="line"><span class="string"> False False False  True  True  True  True  True]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(x[mask])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[ 0.   0.5  1.   1.5  2.   2.5  3.   3.5  4.   4.5  5.   7.5  8.   8.5  9.</span></span><br><span class="line"><span class="string">  9.5]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="9、排序、搜索、计数"><a href="#9、排序、搜索、计数" class="headerlink" title="9、排序、搜索、计数"></a>9、排序、搜索、计数</h2><p>最后，再介绍几个 numpy 针对数组元素的使用方法，分别是排序、搜索和计数。</p><h3 id="9-1-排序"><a href="#9-1-排序" class="headerlink" title="9.1 排序"></a>9.1 排序</h3><p>我们可以使用 numpy.sort方法对多维数组元素进行排序。其方法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.sort(a, axis=<span class="number">-1</span>, kind=<span class="string">'quicksort'</span>, order=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>a：数组。</li><li>axis：要排序的轴。如果为None，则在排序之前将数组铺平。默认值为 -1，沿最后一个轴排序。</li><li>kind：{‘quicksort’，’mergesort’，’heapsort’}，排序算法。默认值为 quicksort。</li></ul><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.random.rand(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[ <span class="number">0.32930243</span>,  <span class="number">0.63665893</span>,  <span class="number">0.67589989</span>,  <span class="number">0.05413352</span>,  <span class="number">0.26090526</span>],</span><br><span class="line">       [ <span class="number">0.6996066</span> ,  <span class="number">0.66006238</span>,  <span class="number">0.88240934</span>,  <span class="number">0.17563549</span>,  <span class="number">0.03015105</span>],</span><br><span class="line">       [ <span class="number">0.79075184</span>,  <span class="number">0.40115859</span>,  <span class="number">0.39336513</span>,  <span class="number">0.64691791</span>,  <span class="number">0.96333534</span>],</span><br><span class="line">       [ <span class="number">0.20052738</span>,  <span class="number">0.46157057</span>,  <span class="number">0.48653336</span>,  <span class="number">0.34537645</span>,  <span class="number">0.54597273</span>]])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.sort(a)</span><br><span class="line">array([[ <span class="number">0.05413352</span>,  <span class="number">0.26090526</span>,  <span class="number">0.32930243</span>,  <span class="number">0.63665893</span>,  <span class="number">0.67589989</span>],</span><br><span class="line">       [ <span class="number">0.03015105</span>,  <span class="number">0.17563549</span>,  <span class="number">0.66006238</span>,  <span class="number">0.6996066</span> ,  <span class="number">0.88240934</span>],</span><br><span class="line">       [ <span class="number">0.39336513</span>,  <span class="number">0.40115859</span>,  <span class="number">0.64691791</span>,  <span class="number">0.79075184</span>,  <span class="number">0.96333534</span>],</span><br><span class="line">       [ <span class="number">0.20052738</span>,  <span class="number">0.34537645</span>,  <span class="number">0.46157057</span>,  <span class="number">0.48653336</span>,  <span class="number">0.54597273</span>]])</span><br></pre></td></tr></table></figure><p>除了 numpy.sort，还有这样一些对数组进行排序的方法：</p><ul><li>numpy.lexsort(keys ,axis)：使用多个键进行间接排序。</li><li>numpy.argsort(a ,axis,kind,order)：沿给定轴执行间接排序。</li><li>numpy.msort(a)：沿第 1 个轴排序。</li><li>numpy.sort_complex(a)：针对复数排序。</li></ul><h3 id="9-2-搜索和计数"><a href="#9-2-搜索和计数" class="headerlink" title="9.2 搜索和计数"></a>9.2 搜索和计数</h3><p>除了排序，我们可以通过下面这些方法对数组中元素进行搜索和计数。列举如下：</p><ol><li>argmax(a ,axis,out)：返回数组中指定轴的最大值的索引。</li><li>nanargmax(a ,axis)：返回数组中指定轴的最大值的索引,忽略 NaN。</li><li>argmin(a ,axis,out)：返回数组中指定轴的最小值的索引。</li><li>nanargmin(a ,axis)：返回数组中指定轴的最小值的索引,忽略 NaN。</li><li>argwhere(a)：返回数组中非 0 元素的索引,按元素分组。</li><li>nonzero(a)：返回数组中非 0 元素的索引。</li><li>flatnonzero(a)：返回数组中非 0 元素的索引,并铺平。</li><li>where(条件,x,y)：根据指定条件,从指定行、列返回元素。</li><li>searchsorted(a,v ,side,sorter)：查找要插入元素以维持顺序的索引。</li><li>extract(condition,arr)：返回满足某些条件的数组的元素。</li><li>count_nonzero(a)：计算数组中非 0 元素的数量。</li></ol><p>选取其中的一些方法举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.argmax(a)</span><br><span class="line"><span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.nanargmax(a)</span><br><span class="line"><span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.argmin(a)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.nanargmin(a)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.argwhere(a)</span><br><span class="line">array([[ <span class="number">0</span>],[ <span class="number">1</span>],[ <span class="number">3</span>],[ <span class="number">4</span>],[ <span class="number">5</span>],[ <span class="number">6</span>],[ <span class="number">7</span>],[ <span class="number">8</span>],[ <span class="number">9</span>],[<span class="number">10</span>],[<span class="number">11</span>],[<span class="number">12</span>],[<span class="number">13</span>],[<span class="number">14</span>],[<span class="number">15</span>],[<span class="number">16</span>],[<span class="number">17</span>],[<span class="number">18</span>],[<span class="number">19</span>]], dtype=int64)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.nonzero(a)</span><br><span class="line">(array([ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>], dtype=int64),)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.flatnonzero(a)</span><br><span class="line">array([ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>], dtype=int64)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.count_nonzero(a)</span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure><h2 id="10-操作-numpy-数组的常用函数"><a href="#10-操作-numpy-数组的常用函数" class="headerlink" title="10. 操作 numpy 数组的常用函数"></a>10. 操作 numpy 数组的常用函数</h2><p><strong>where</strong></p><p>使用 where 函数能将索引掩码转换成索引位置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">x = arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.5</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([ 0. ,  0.5,  1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5,  5. ,</span></span><br><span class="line"><span class="string">           5.5,  6. ,  6.5,  7. ,  7.5,  8. ,  8.5,  9. ,  9.5])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">mask = (<span class="number">5</span> &lt; x) * (x &lt; <span class="number">7.5</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([False, False, False, False, False, False, False, False, False,</span></span><br><span class="line"><span class="string">          False, False,  True,  True,  True,  True, False, False, False,</span></span><br><span class="line"><span class="string">          False, False], dtype=bool)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">x[mask]</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([ 5.5,  6. ,  6.5,  7. ])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">indices = where(mask)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; (array([11, 12, 13, 14]),)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">x[indices] <span class="comment"># this indexing is equivalent to the fancy indexing x[mask]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([ 5.5,  6. ,  6.5,  7. ])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>diag</strong><br>使用 diag 函数能够提取出数组的对角线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">A = array([[n+m*<span class="number">10</span> <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">5</span>)] <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">5</span>)])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([[ 0,  1,  2,  3,  4],</span></span><br><span class="line"><span class="string">          [10, 11, 12, 13, 14],</span></span><br><span class="line"><span class="string">          [20, 21, 22, 23, 24],</span></span><br><span class="line"><span class="string">          [30, 31, 32, 33, 34],</span></span><br><span class="line"><span class="string">          [40, 41, 42, 43, 44]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">diag(A)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([ 0, 11, 22, 33, 44])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">diag(A, <span class="number">-1</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([10, 21, 32, 43])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>take</strong></p><p>take 函数与高级索引（fancy indexing）用法相似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">v2 = arange(<span class="number">-3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([-3, -2, -1,  0,  1,  2])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">row_indices = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">v2[row_indices] <span class="comment"># fancy indexing</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([-2,  0,  2])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">v2.take(row_indices)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([-2,  0,  2])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>但是 take 也可以用在 list 和其它对象上：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">take([<span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-1</span>,  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>], row_indices)</span><br><span class="line"></span><br><span class="line">=&gt; array([-2,  0,  2])</span><br></pre></td></tr></table></figure><p><strong>choose</strong></p><p>选取多个数组的部分组成新的数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">which = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">choices = [[<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>,<span class="number">-4</span>], [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]]</span><br><span class="line">print(choose(which, choices))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">=&gt; array([ 5, -2,  7, -4])</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文转载自&lt;a href=&quot;https://blog.csdn.net/wc781708249/article/details/78194039?locationNum=10&amp;amp;fps=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/wc781708249/article/details/78194039?locationNum=10&amp;amp;fps=1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考地址：&lt;/p&gt;
&lt;p&gt;1、&lt;a href=&quot;https://www.shiyanlou.com/courses/912&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.shiyanlou.com/courses/912&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;a href=&quot;https://www.shiyanlou.com/courses/348&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.shiyanlou.com/courses/348&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.scipy.org/doc/numpy/reference/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4、&lt;a href=&quot;https://docs.scipy.org/doc/numpy/user/index.html#user&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.scipy.org/doc/numpy/user/index.html#user&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5、&lt;a href=&quot;http://scipy.github.io/old-wiki/pages/Tentative_NumPy_Tutorial&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://scipy.github.io/old-wiki/pages/Tentative_NumPy_Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6、&lt;a href=&quot;https://docs.scipy.org/doc/numpy-dev/user/quickstart.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.scipy.org/doc/numpy-dev/user/quickstart.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://www.sunnyshining.xyz/categories/programming/"/>
    
    
      <category term="python" scheme="https://www.sunnyshining.xyz/tags/python/"/>
    
  </entry>
  
</feed>
